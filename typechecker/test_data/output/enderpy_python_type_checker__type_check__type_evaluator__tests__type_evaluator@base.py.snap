---
source: typechecker/src/type_check/type_evaluator.rs
description: "1: a = 1\n2: b = \"1\"\n3: c = True\n4: d = False\n5: a + int(b)\n6: \n7: a + c\n8: \n9: def func(param1: int) -> int:\n10: \treturn param1 + a\n11: \n12: class C:\n13: \tcls_attribute = 1\n14: \n15: \tdef __init__(self, x: int):\n16: \t\tprint(self.cls_attribute)\n17: \t\tself.x = x\n18: \t\tprint(self.x)\n19: \n20: \tdef add(self, value: int):\n21: \t\tself.cls_attribute += value\n22: \n23: t = C(0)\n24: t.add(2)\n25: t.cls_attribute\n26: t.x\n27: \n28: l = [1,2,3]\n29: d = {\"a\": 1, \"b\": 2}\n30: s = {1,2,3}\n31: \n32: l.append(1)\n"
expression: result
input_file: typechecker/test_data/inputs/base.py
---
Line 1: a = 1

Expr types in the line --->:
        "1" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 2: b = "1"

Expr types in the line --->:
        "\"1\"" => Class(ClassType { details: Class { name: "str", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 17176, end: 25985 } }, methods: ["__new__", "__new__", "capitalize", "capitalize", "casefold", "casefold", "center", "center", "count", "encode", "endswith", "find", "format", "format", "format_map", "index", "isalnum", "isalpha", "isascii", "isdecimal", "isdigit", "isidentifier", "islower", "isnumeric", "isprintable", "isspace", "istitle", "isupper", "join", "join", "ljust", "ljust", "lower", "lower", "lstrip", "lstrip", "partition", "partition", "replace", "replace", "rfind", "rindex", "rjust", "rjust", "rpartition", "rpartition", "rsplit", "rsplit", "rstrip", "rstrip", "split", "split", "splitlines", "splitlines", "startswith", "strip", "strip", "swapcase", "swapcase", "title", "title", "translate", "upper", "upper", "zfill", "zfill", "maketrans", "maketrans", "maketrans", "__add__", "__add__", "__contains__", "__eq__", "__ge__", "__getitem__", "__gt__", "__hash__", "__iter__", "__iter__", "__le__", "__len__", "__lt__", "__mod__", "__mod__", "__mul__", "__mul__", "__ne__", "__rmul__", "__rmul__", "__getnewargs__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 3: c = True

Expr types in the line --->:
        "True" => Class(ClassType { details: Class { name: "bool", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 39629, end: 40711 } }, methods: ["__new__", "__and__", "__and__", "__or__", "__or__", "__xor__", "__xor__", "__rand__", "__rand__", "__ror__", "__ror__", "__rxor__", "__rxor__", "__getnewargs__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 4: d = False

Expr types in the line --->:
        "False" => Class(ClassType { details: Class { name: "bool", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 39629, end: 40711 } }, methods: ["__new__", "__and__", "__and__", "__or__", "__or__", "__xor__", "__xor__", "__rand__", "__rand__", "__ror__", "__ror__", "__rxor__", "__rxor__", "__getnewargs__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 5: a + int(b)

Expr types in the line --->:
        "a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })
        "int(b)" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 7: a + c

Expr types in the line --->:
        "a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })
        "c" => Class(ClassType { details: Class { name: "bool", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 39629, end: 40711 } }, methods: ["__new__", "__and__", "__and__", "__or__", "__or__", "__xor__", "__xor__", "__rand__", "__rand__", "__ror__", "__ror__", "__rxor__", "__rxor__", "__getnewargs__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 10: 	return param1 + a

Expr types in the line --->:
        "param1" => Unknown
        "a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })
        "param1 + a" => Unknown

---
Line 13: 	cls_attribute = 1

Expr types in the line --->:
        "1" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 16: 		print(self.cls_attribute)

Expr types in the line --->:
        "print(self.cls_attribute)" => Callable(CallableType { name: "print", arguments: Arguments { node: Node { start: 69733, end: 69857 }, posonlyargs: [], args: [], vararg: Some(Arg { node: Node { start: 69734, end: 69748 }, arg: "values", annotation: Some(Name(Name { node: Node { start: 69742, end: 69748 }, id: "object" })) }), kwonlyargs: [Arg { node: Node { start: 69750, end: 69771 }, arg: "sep", annotation: Some(BinOp(BinOp { node: Node { start: 69755, end: 69765 }, op: BitOr, left: Name(Name { node: Node { start: 69755, end: 69758 }, id: "str" }), right: Constant(Constant { node: Node { start: 69761, end: 69765 }, value: None }) })) }, Arg { node: Node { start: 69773, end: 69795 }, arg: "end", annotation: Some(BinOp(BinOp { node: Node { start: 69778, end: 69788 }, op: BitOr, left: Name(Name { node: Node { start: 69778, end: 69781 }, id: "str" }), right: Constant(Constant { node: Node { start: 69784, end: 69788 }, value: None }) })) }, Arg { node: Node { start: 69797, end: 69844 }, arg: "file", annotation: Some(BinOp(BinOp { node: Node { start: 69803, end: 69837 }, op: BitOr, left: Subscript(Subscript { node: Node { start: 69803, end: 69830 }, value: Name(Name { node: Node { start: 69803, end: 69825 }, id: "_SupportsWriteAndFlush" }), slice: Name(Name { node: Node { start: 69826, end: 69829 }, id: "str" }) }), right: Constant(Constant { node: Node { start: 69833, end: 69837 }, value: None }) })) }, Arg { node: Node { start: 69846, end: 69857 }, arg: "flush", annotation: Some(Name(Name { node: Node { start: 69853, end: 69857 }, id: "bool" })) }], kw_defaults: [Some(Constant(Constant { node: Node { start: 69768, end: 69771 }, value: " " })), Some(Constant(Constant { node: Node { start: 69791, end: 69795 }, value: "\n" })), Some(Constant(Constant { node: Node { start: 69840, end: 69844 }, value: None })), None], kwarg: None, defaults: [] }, return_type: None })
        "self.cls_attribute" => Unknown

---
Line 17: 		self.x = x

Expr types in the line --->:
        "x" => Unknown

---
Line 18: 		print(self.x)

Expr types in the line --->:
        "print(self.x)" => Callable(CallableType { name: "print", arguments: Arguments { node: Node { start: 69733, end: 69857 }, posonlyargs: [], args: [], vararg: Some(Arg { node: Node { start: 69734, end: 69748 }, arg: "values", annotation: Some(Name(Name { node: Node { start: 69742, end: 69748 }, id: "object" })) }), kwonlyargs: [Arg { node: Node { start: 69750, end: 69771 }, arg: "sep", annotation: Some(BinOp(BinOp { node: Node { start: 69755, end: 69765 }, op: BitOr, left: Name(Name { node: Node { start: 69755, end: 69758 }, id: "str" }), right: Constant(Constant { node: Node { start: 69761, end: 69765 }, value: None }) })) }, Arg { node: Node { start: 69773, end: 69795 }, arg: "end", annotation: Some(BinOp(BinOp { node: Node { start: 69778, end: 69788 }, op: BitOr, left: Name(Name { node: Node { start: 69778, end: 69781 }, id: "str" }), right: Constant(Constant { node: Node { start: 69784, end: 69788 }, value: None }) })) }, Arg { node: Node { start: 69797, end: 69844 }, arg: "file", annotation: Some(BinOp(BinOp { node: Node { start: 69803, end: 69837 }, op: BitOr, left: Subscript(Subscript { node: Node { start: 69803, end: 69830 }, value: Name(Name { node: Node { start: 69803, end: 69825 }, id: "_SupportsWriteAndFlush" }), slice: Name(Name { node: Node { start: 69826, end: 69829 }, id: "str" }) }), right: Constant(Constant { node: Node { start: 69833, end: 69837 }, value: None }) })) }, Arg { node: Node { start: 69846, end: 69857 }, arg: "flush", annotation: Some(Name(Name { node: Node { start: 69853, end: 69857 }, id: "bool" })) }], kw_defaults: [Some(Constant(Constant { node: Node { start: 69768, end: 69771 }, value: " " })), Some(Constant(Constant { node: Node { start: 69791, end: 69795 }, value: "\n" })), Some(Constant(Constant { node: Node { start: 69840, end: 69844 }, value: None })), None], kwarg: None, defaults: [] }, return_type: None })
        "self.x" => Unknown

---
Line 23: t = C(0)

Expr types in the line --->:
        "C(0)" => Class(ClassType { details: Class { name: "C", declaration_path: DeclarationPath { module_name: "test-file", node: Node { start: 102, end: 277 } }, methods: ["__init__", "add"], attributes: {"x": Name(Name { node: Node { start: 199, end: 200 }, id: "x" })}, special: false }, type_parameters: [] })

---
Line 24: t.add(2)

Expr types in the line --->:
        "(2)" => Unknown
        "2" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })

---
Line 28: l = [1,2,3]

Expr types in the line --->:
        "[1,2,3]" => Class(ClassType { details: Class { name: "list", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })] })

---
Line 29: d = {"a": 1, "b": 2}

Expr types in the line --->:
        "{\"a\": 1, \"b\": 2}" => Class(ClassType { details: Class { name: "dict", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })] })

---
Line 30: s = {1,2,3}

Expr types in the line --->:
        "{1,2,3}" => Class(ClassType { details: Class { name: "set", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })] })

---
Line 32: l.append(1)

Expr types in the line --->:
        "(1)" => Unknown
        "1" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], attributes: {}, special: false }, type_parameters: [] })

---

