---
source: typechecker/src/type_check/type_evaluator.rs
description: "1: a = 1\n2: b = \"1\"\n3: c = True\n4: d = False\n5: a + int(b)\n6: \n7: \n8: a + c\n9: \n10: def func(param1: int) -> int:\n11: \treturn param1 + a\n12: \n13: class C:\n14: \tcls_attribute = 1\n15: \n16: \tdef __init__(self, x: int):\n17: \t\tprint(self.cls_attribute)\n18: \t\tself.x = float(x)\n19: \t\tprint(self.x)\n20: \n21: \tdef add(self, value: int):\n22: \t\tself.cls_attribute += value\n23: \n24: \tdef get_attr(self) -> int:\n25: \t\treturn self.cls_attribute\n26: \n27: \tdef\tget_x(self) -> float:\n28: \t\treturn self.x\n29: \n30: t = C(0)\n31: t.add(2)\n32: t.cls_attribute\n33: t.x\n34: t.get_x()\n35: t.get_attr()\n36: \n37: l = [1,2,3]\n38: d = {\"a\": 1, \"b\": 2}\n39: s = {1,2,3}\n40: \n41: # l.append(1)\n"
expression: result
input_file: typechecker/test_data/inputs/base.py
---
Line 1: a = 1

Expr types in the line --->:
        "1" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 2: b = "1"

Expr types in the line --->:
        "\"1\"" => Class(ClassType { details: Class { name: "str", declaration_path: DeclarationPath { module_name: "", node: Node { start: 17176, end: 25985 } }, methods: ["__new__", "__new__", "capitalize", "capitalize", "casefold", "casefold", "center", "center", "count", "encode", "endswith", "find", "format", "format", "format_map", "index", "isalnum", "isalpha", "isascii", "isdecimal", "isdigit", "isidentifier", "islower", "isnumeric", "isprintable", "isspace", "istitle", "isupper", "join", "join", "ljust", "ljust", "lower", "lower", "lstrip", "lstrip", "partition", "partition", "replace", "replace", "rfind", "rindex", "rjust", "rjust", "rpartition", "rpartition", "rsplit", "rsplit", "rstrip", "rstrip", "split", "split", "splitlines", "splitlines", "startswith", "strip", "strip", "swapcase", "swapcase", "title", "title", "translate", "upper", "upper", "zfill", "zfill", "maketrans", "maketrans", "maketrans", "__add__", "__add__", "__contains__", "__eq__", "__ge__", "__getitem__", "__gt__", "__hash__", "__iter__", "__iter__", "__le__", "__len__", "__lt__", "__mod__", "__mod__", "__mul__", "__mul__", "__ne__", "__rmul__", "__rmul__", "__getnewargs__"], special: false }, type_parameters: [] })

---
Line 3: c = True

Expr types in the line --->:
        "True" => Class(ClassType { details: Class { name: "bool", declaration_path: DeclarationPath { module_name: "", node: Node { start: 39629, end: 40711 } }, methods: ["__new__", "__and__", "__and__", "__or__", "__or__", "__xor__", "__xor__", "__rand__", "__rand__", "__ror__", "__ror__", "__rxor__", "__rxor__", "__getnewargs__"], special: false }, type_parameters: [] })

---
Line 4: d = False

Expr types in the line --->:
        "False" => Class(ClassType { details: Class { name: "bool", declaration_path: DeclarationPath { module_name: "", node: Node { start: 39629, end: 40711 } }, methods: ["__new__", "__and__", "__and__", "__or__", "__or__", "__xor__", "__xor__", "__rand__", "__rand__", "__ror__", "__ror__", "__rxor__", "__rxor__", "__getnewargs__"], special: false }, type_parameters: [] })

---
Line 5: a + int(b)

Expr types in the line --->:
        "a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })
        "int(b)" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 8: a + c

Expr types in the line --->:
        "a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })
        "c" => Class(ClassType { details: Class { name: "bool", declaration_path: DeclarationPath { module_name: "", node: Node { start: 39629, end: 40711 } }, methods: ["__new__", "__and__", "__and__", "__or__", "__or__", "__xor__", "__xor__", "__rand__", "__rand__", "__ror__", "__ror__", "__rxor__", "__rxor__", "__getnewargs__"], special: false }, type_parameters: [] })

---
Line 11: 	return param1 + a

Expr types in the line --->:
        "param1" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })
        "a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })
        "param1 + a" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 14: 	cls_attribute = 1

Expr types in the line --->:
        "1" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 17: 		print(self.cls_attribute)

Expr types in the line --->:
        "print(self.cls_attribute)" => Callable(CallableType { name: "print", arguments: Arguments { node: Node { start: 69542, end: 69692 }, posonlyargs: [], args: [], vararg: Some(Arg { node: Node { start: 69543, end: 69557 }, arg: "values", annotation: Some(Name(Name { node: Node { start: 69551, end: 69557 }, id: "object" })) }), kwonlyargs: [Arg { node: Node { start: 69563, end: 69584 }, arg: "sep", annotation: Some(BinOp(BinOp { node: Node { start: 69568, end: 69578 }, op: BitOr, left: Name(Name { node: Node { start: 69568, end: 69571 }, id: "str" }), right: Constant(Constant { node: Node { start: 69574, end: 69578 }, value: None }) })) }, Arg { node: Node { start: 69590, end: 69612 }, arg: "end", annotation: Some(BinOp(BinOp { node: Node { start: 69595, end: 69605 }, op: BitOr, left: Name(Name { node: Node { start: 69595, end: 69598 }, id: "str" }), right: Constant(Constant { node: Node { start: 69601, end: 69605 }, value: None }) })) }, Arg { node: Node { start: 69618, end: 69656 }, arg: "file", annotation: Some(BinOp(BinOp { node: Node { start: 69624, end: 69649 }, op: BitOr, left: Subscript(Subscript { node: Node { start: 69624, end: 69642 }, value: Name(Name { node: Node { start: 69624, end: 69637 }, id: "SupportsWrite" }), slice: Name(Name { node: Node { start: 69638, end: 69641 }, id: "str" }) }), right: Constant(Constant { node: Node { start: 69645, end: 69649 }, value: None }) })) }, Arg { node: Node { start: 69662, end: 69691 }, arg: "flush", annotation: Some(Subscript(Subscript { node: Node { start: 69669, end: 69683 }, value: Name(Name { node: Node { start: 69669, end: 69676 }, id: "Literal" }), slice: Constant(Constant { node: Node { start: 69677, end: 69682 }, value: false }) })) }], kw_defaults: [Some(Constant(Constant { node: Node { start: 69581, end: 69584 }, value: " " })), Some(Constant(Constant { node: Node { start: 69608, end: 69612 }, value: "\n" })), Some(Constant(Constant { node: Node { start: 69652, end: 69656 }, value: None })), Some(Constant(Constant { node: Node { start: 69686, end: 69691 }, value: false }))], kwarg: None, defaults: [] }, return_type: None })
        "self.cls_attribute" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 18: 		self.x = float(x)

Expr types in the line --->:
        "float(x)" => Class(ClassType { details: Class { name: "float", declaration_path: DeclarationPath { module_name: "", node: Node { start: 12343, end: 15122 } }, methods: ["__new__", "as_integer_ratio", "hex", "is_integer", "fromhex", "real", "imag", "conjugate", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__pow__", "__pow__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__rpow__", "__rpow__", "__rpow__", "__getnewargs__", "__trunc__", "__round__", "__round__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__neg__", "__pos__", "__int__", "__float__", "__abs__", "__hash__", "__bool__"], special: false }, type_parameters: [] })

---
Line 19: 		print(self.x)

Expr types in the line --->:
        "print(self.x)" => Callable(CallableType { name: "print", arguments: Arguments { node: Node { start: 69542, end: 69692 }, posonlyargs: [], args: [], vararg: Some(Arg { node: Node { start: 69543, end: 69557 }, arg: "values", annotation: Some(Name(Name { node: Node { start: 69551, end: 69557 }, id: "object" })) }), kwonlyargs: [Arg { node: Node { start: 69563, end: 69584 }, arg: "sep", annotation: Some(BinOp(BinOp { node: Node { start: 69568, end: 69578 }, op: BitOr, left: Name(Name { node: Node { start: 69568, end: 69571 }, id: "str" }), right: Constant(Constant { node: Node { start: 69574, end: 69578 }, value: None }) })) }, Arg { node: Node { start: 69590, end: 69612 }, arg: "end", annotation: Some(BinOp(BinOp { node: Node { start: 69595, end: 69605 }, op: BitOr, left: Name(Name { node: Node { start: 69595, end: 69598 }, id: "str" }), right: Constant(Constant { node: Node { start: 69601, end: 69605 }, value: None }) })) }, Arg { node: Node { start: 69618, end: 69656 }, arg: "file", annotation: Some(BinOp(BinOp { node: Node { start: 69624, end: 69649 }, op: BitOr, left: Subscript(Subscript { node: Node { start: 69624, end: 69642 }, value: Name(Name { node: Node { start: 69624, end: 69637 }, id: "SupportsWrite" }), slice: Name(Name { node: Node { start: 69638, end: 69641 }, id: "str" }) }), right: Constant(Constant { node: Node { start: 69645, end: 69649 }, value: None }) })) }, Arg { node: Node { start: 69662, end: 69691 }, arg: "flush", annotation: Some(Subscript(Subscript { node: Node { start: 69669, end: 69683 }, value: Name(Name { node: Node { start: 69669, end: 69676 }, id: "Literal" }), slice: Constant(Constant { node: Node { start: 69677, end: 69682 }, value: false }) })) }], kw_defaults: [Some(Constant(Constant { node: Node { start: 69581, end: 69584 }, value: " " })), Some(Constant(Constant { node: Node { start: 69608, end: 69612 }, value: "\n" })), Some(Constant(Constant { node: Node { start: 69652, end: 69656 }, value: None })), Some(Constant(Constant { node: Node { start: 69686, end: 69691 }, value: false }))], kwarg: None, defaults: [] }, return_type: None })
        "self.x" => Class(ClassType { details: Class { name: "float", declaration_path: DeclarationPath { module_name: "", node: Node { start: 12343, end: 15122 } }, methods: ["__new__", "as_integer_ratio", "hex", "is_integer", "fromhex", "real", "imag", "conjugate", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__pow__", "__pow__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__rpow__", "__rpow__", "__rpow__", "__getnewargs__", "__trunc__", "__round__", "__round__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__neg__", "__pos__", "__int__", "__float__", "__abs__", "__hash__", "__bool__"], special: false }, type_parameters: [] })

---
Line 25: 		return self.cls_attribute

Expr types in the line --->:
        "self.cls_attribute" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 28: 		return self.x

Expr types in the line --->:
        "self.x" => Class(ClassType { details: Class { name: "float", declaration_path: DeclarationPath { module_name: "", node: Node { start: 12343, end: 15122 } }, methods: ["__new__", "as_integer_ratio", "hex", "is_integer", "fromhex", "real", "imag", "conjugate", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__pow__", "__pow__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__rpow__", "__rpow__", "__rpow__", "__getnewargs__", "__trunc__", "__round__", "__round__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__neg__", "__pos__", "__int__", "__float__", "__abs__", "__hash__", "__bool__"], special: false }, type_parameters: [] })

---
Line 30: t = C(0)

Expr types in the line --->:
        "C(0)" => Class(ClassType { details: Class { name: "C", declaration_path: DeclarationPath { module_name: "", node: Node { start: 103, end: 386 } }, methods: ["__init__", "add", "get_attr", "get_x"], special: false }, type_parameters: [] })

---
Line 31: t.add(2)

Expr types in the line --->:
        "(2)" => Callable(CallableType { name: "add", arguments: Arguments { node: Node { start: 235, end: 251 }, posonlyargs: [], args: [Arg { node: Node { start: 235, end: 239 }, arg: "self", annotation: None }, Arg { node: Node { start: 241, end: 251 }, arg: "value", annotation: Some(Name(Name { node: Node { start: 248, end: 251 }, id: "int" })) }], vararg: None, kwonlyargs: [], kw_defaults: [], kwarg: None, defaults: [] }, return_type: None })
        "2" => Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })

---
Line 34: t.get_x()

Expr types in the line --->:
        "()" => Callable(CallableType { name: "get_x", arguments: Arguments { node: Node { start: 353, end: 357 }, posonlyargs: [], args: [Arg { node: Node { start: 353, end: 357 }, arg: "self", annotation: None }], vararg: None, kwonlyargs: [], kw_defaults: [], kwarg: None, defaults: [] }, return_type: Class(ClassType { details: Class { name: "float", declaration_path: DeclarationPath { module_name: "", node: Node { start: 12343, end: 15122 } }, methods: ["__new__", "as_integer_ratio", "hex", "is_integer", "fromhex", "real", "imag", "conjugate", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__pow__", "__pow__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__rpow__", "__rpow__", "__rpow__", "__getnewargs__", "__trunc__", "__round__", "__round__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__neg__", "__pos__", "__int__", "__float__", "__abs__", "__hash__", "__bool__"], special: false }, type_parameters: [] }) })

---
Line 35: t.get_attr()

Expr types in the line --->:
        "()" => Callable(CallableType { name: "get_attr", arguments: Arguments { node: Node { start: 299, end: 303 }, posonlyargs: [], args: [Arg { node: Node { start: 299, end: 303 }, arg: "self", annotation: None }], vararg: None, kwonlyargs: [], kw_defaults: [], kwarg: None, defaults: [] }, return_type: Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] }) })

---
Line 37: l = [1,2,3]

Expr types in the line --->:
        "[1,2,3]" => Class(ClassType { details: Class { name: "list", declaration_path: DeclarationPath { module_name: "", node: Node { start: 43505, end: 46298 } }, methods: ["__init__", "__init__", "copy", "append", "extend", "pop", "index", "count", "insert", "remove", "sort", "sort", "__len__", "__iter__", "__getitem__", "__getitem__", "__setitem__", "__setitem__", "__delitem__", "__add__", "__add__", "__iadd__", "__mul__", "__rmul__", "__imul__", "__contains__", "__reversed__", "__gt__", "__ge__", "__lt__", "__le__", "__eq__"], special: false }, type_parameters: [Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })] })

---
Line 38: d = {"a": 1, "b": 2}

Expr types in the line --->:
        "{\"a\": 1, \"b\": 2}" => Class(ClassType { details: Class { name: "dict", declaration_path: DeclarationPath { module_name: "", node: Node { start: 46298, end: 49982 } }, methods: ["__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__new__", "copy", "keys", "values", "items", "fromkeys", "fromkeys", "get", "get", "get", "pop", "pop", "pop", "__len__", "__getitem__", "__setitem__", "__delitem__", "__iter__", "__eq__"], special: false }, type_parameters: [Class(ClassType { details: Class { name: "str", declaration_path: DeclarationPath { module_name: "", node: Node { start: 17176, end: 25985 } }, methods: ["__new__", "__new__", "capitalize", "capitalize", "casefold", "casefold", "center", "center", "count", "encode", "endswith", "find", "format", "format", "format_map", "index", "isalnum", "isalpha", "isascii", "isdecimal", "isdigit", "isidentifier", "islower", "isnumeric", "isprintable", "isspace", "istitle", "isupper", "join", "join", "ljust", "ljust", "lower", "lower", "lstrip", "lstrip", "partition", "partition", "replace", "replace", "rfind", "rindex", "rjust", "rjust", "rpartition", "rpartition", "rsplit", "rsplit", "rstrip", "rstrip", "split", "split", "splitlines", "splitlines", "startswith", "strip", "strip", "swapcase", "swapcase", "title", "title", "translate", "upper", "upper", "zfill", "zfill", "maketrans", "maketrans", "maketrans", "__add__", "__add__", "__contains__", "__eq__", "__ge__", "__getitem__", "__gt__", "__hash__", "__iter__", "__iter__", "__le__", "__len__", "__lt__", "__mod__", "__mod__", "__mul__", "__mul__", "__ne__", "__rmul__", "__rmul__", "__getnewargs__"], special: false }, type_parameters: [] }), Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })] })

---
Line 39: s = {1,2,3}

Expr types in the line --->:
        "{1,2,3}" => Class(ClassType { details: Class { name: "set", declaration_path: DeclarationPath { module_name: "", node: Node { start: 49982, end: 52187 } }, methods: ["__init__", "__init__", "add", "copy", "difference", "difference_update", "discard", "intersection", "intersection_update", "isdisjoint", "issubset", "issuperset", "remove", "symmetric_difference", "symmetric_difference_update", "union", "update", "__len__", "__contains__", "__iter__", "__and__", "__iand__", "__or__", "__ior__", "__sub__", "__isub__", "__xor__", "__ixor__", "__le__", "__lt__", "__ge__", "__gt__", "__eq__"], special: false }, type_parameters: [Class(ClassType { details: Class { name: "int", declaration_path: DeclarationPath { module_name: "", node: Node { start: 7961, end: 12343 } }, methods: ["__new__", "__new__", "real", "imag", "numerator", "denominator", "conjugate", "bit_length", "__add__", "__sub__", "__mul__", "__floordiv__", "__truediv__", "__mod__", "__divmod__", "__radd__", "__rsub__", "__rmul__", "__rfloordiv__", "__rtruediv__", "__rmod__", "__rdivmod__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__pow__", "__rpow__", "__and__", "__or__", "__xor__", "__lshift__", "__rshift__", "__rand__", "__ror__", "__rxor__", "__rlshift__", "__rrshift__", "__neg__", "__pos__", "__invert__", "__trunc__", "__ceil__", "__floor__", "__round__", "__getnewargs__", "__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__float__", "__int__", "__abs__", "__hash__", "__bool__", "__index__"], special: false }, type_parameters: [] })] })

---

