---
source: typechecker/src/build.rs
description: "from logging import Logger\nfrom typing import Generic, Sequence, TypeVar, Iterable\n\nT = TypeVar(\"T\")\n\n\ndef first(l: Sequence[T]) -> T:\n    return l[0]\n\n\nfirst([1, 2, 3])  # return type type parameter\n\n\nAnyStr = TypeVar(\"AnyStr\", str, bytes)\n\n\ndef concat(x: AnyStr, y: AnyStr) -> AnyStr:\n    return x + y\n\n\n# > Specifying a single constraint is disallowed.\n\nBadConstraint1 = TypeVar(\"BadConstraint1\", str)  # Type error\n\n# > Note: those types cannot be parameterized by type variables\n\nBadConstraint2 = TypeVar(\"BadConstraint2\", str, T)  # Type error\n\n\nclass LoggedVar(Generic[T]):\n    def __init__(self, value: T, name: str, logger: Logger) -> None:\n        self.name = name\n        self.logger = logger\n        self.value = value\n\n    def set(self, new: T) -> None:\n        self.log(\"Set \" + repr(self.value))\n        self.value = new\n\n    def get(self) -> T:\n        self.log(\"Get \" + repr(self.value))\n        return self.value\n\n    def log(self, message: str) -> None:\n        msg = \"{}: {}\".format(self.name, message)\n        self.logger.info(msg)\n\n\nlog_var = LoggedVar(1, \"var1\", Logger(\"test\"))\n\n\ndef zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n    for var in vars:\n        var.set(0)\n\n\nzero_all_vars([log_var])  # OK\n\n\n# > A generic type can have any number of type variables, and type variables\n# > may be constrained.\n\nS = TypeVar(\"S\")\n\n\nclass Pair1(Generic[T, S]): ...\n\n\npair1 = Pair1()\n\n# > Each type variable argument to ``Generic`` must be distinct.\n\n\nclass Pair2(Generic[T, T]):  # Type error\n    ...\n\n\npair2 = Pair2()\n\n# > The ``Generic[T]`` base class is redundant in simple cases where you\n# > subclass some other generic class and specify type variables for its\n# > parameters.\n\nfrom collections.abc import Iterator, Mapping\n\n\nclass MyIter1(Iterator[T]): ...\n\n\nclass MyIter2(Iterator[T], Generic[T]): ...\n\n\niter1 = MyIter1()\niter2 = MyIter2()\n\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\n\n\nclass MyMap1(Mapping[K, V], Generic[K, V]): ...\n\n\nmy_map1 = MyMap1()\n\n\nclass MyMap2(Mapping[K, V], Generic[V, K]): ...\n\n\nmy_map2 = MyMap2()\n\n\ndef test_my_map(m1: MyMap1[str, int], m2: MyMap2[int, str]):\n    a = m1[\"key\"]  # int\n    b = m2[\"key\"]  # int\n\n    m1[0]  # Type error\n    m2[0]  # Type error\n\n\n# > You can use multiple inheritance with ``Generic``\n\nfrom collections.abc import Sized, Container\n\n\nclass LinkedList(Sized, Generic[T]): ...\n\n\nclass MyMapping(Iterable[tuple[K, V]], Container[tuple[K, V]], Generic[K, V]): ...\n\n\nmy_mapping = MyMapping()\n\n\n# > Subclassing a generic class without specifying type parameters assumes\n# > ``Any`` for each position.  In the following example, ``MyIterable``\n# > is not generic but implicitly inherits from ``Iterable[Any]``::\n\n\nclass MyIterableAny(Iterable):  # Same as Iterable[Any]\n    ...\n\n\ndef test_my_iterable_any(m: MyIterableAny):\n    iter(m)  # Iterator[Any]\n\n\n# > Generic metaclasses are not supported\n\n\nclass GenericMeta(type, Generic[T]): ...\n\n\ngeneric_meta = GenericMeta()\n\n\nclass GenericMetaInstance(metaclass=GenericMeta[T]):  # Type error\n    ...\n\n\ngeneric_meta_instance = GenericMetaInstance()\n"
expression: result
input_file: typechecker/test_data/inputs/basic_generics.py
---
Symbols in GenericMeta

Symbols in GenericMetaInstance

Symbols in LinkedList

Symbols in LoggedVar
__init__ SymbolFlags(0x0)
- Declarations:
--:   Function
get SymbolFlags(0x0)
- Declarations:
--:   Function
log SymbolFlags(0x0)
- Declarations:
--:   Function
logger SymbolFlags(INSTANCE_MEMBER)
- Declarations:
--:   Variable
name SymbolFlags(INSTANCE_MEMBER)
- Declarations:
--:   Variable
set SymbolFlags(0x0)
- Declarations:
--:   Function
value SymbolFlags(INSTANCE_MEMBER)
- Declarations:
--:   Variable

Symbols in MyIter1

Symbols in MyIter2

Symbols in MyIterableAny

Symbols in MyMap1

Symbols in MyMap2

Symbols in MyMapping

Symbols in Pair1

Symbols in Pair2

Symbols in __init__
logger SymbolFlags(0x0)
- Declarations:
--:   Parameter
name SymbolFlags(0x0)
- Declarations:
--:   Parameter
self SymbolFlags(0x0)
- Declarations:
--:   Parameter
value SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in concat
x SymbolFlags(0x0)
- Declarations:
--:   Parameter
y SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in first
l SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in get
self SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in global
AnyStr SymbolFlags(0x0)
- Declarations:
--:   Variable
BadConstraint1 SymbolFlags(0x0)
- Declarations:
--:   Variable
BadConstraint2 SymbolFlags(0x0)
- Declarations:
--:   Variable
Container SymbolFlags(0x0)
- Declarations:
--:   Alias
Generic SymbolFlags(0x0)
- Declarations:
--:   Alias
GenericMeta SymbolFlags(0x0)
- Declarations:
--:   Class
GenericMetaInstance SymbolFlags(0x0)
- Declarations:
--:   Class
Iterable SymbolFlags(0x0)
- Declarations:
--:   Alias
Iterator SymbolFlags(0x0)
- Declarations:
--:   Alias
K SymbolFlags(0x0)
- Declarations:
--:   Variable
LinkedList SymbolFlags(0x0)
- Declarations:
--:   Class
LoggedVar SymbolFlags(0x0)
- Declarations:
--:   Class
Logger SymbolFlags(0x0)
- Declarations:
--:   Alias
Mapping SymbolFlags(0x0)
- Declarations:
--:   Alias
MyIter1 SymbolFlags(0x0)
- Declarations:
--:   Class
MyIter2 SymbolFlags(0x0)
- Declarations:
--:   Class
MyIterableAny SymbolFlags(0x0)
- Declarations:
--:   Class
MyMap1 SymbolFlags(0x0)
- Declarations:
--:   Class
MyMap2 SymbolFlags(0x0)
- Declarations:
--:   Class
MyMapping SymbolFlags(0x0)
- Declarations:
--:   Class
Pair1 SymbolFlags(0x0)
- Declarations:
--:   Class
Pair2 SymbolFlags(0x0)
- Declarations:
--:   Class
S SymbolFlags(0x0)
- Declarations:
--:   Variable
Sequence SymbolFlags(0x0)
- Declarations:
--:   Alias
Sized SymbolFlags(0x0)
- Declarations:
--:   Alias
T SymbolFlags(0x0)
- Declarations:
--:   Variable
TypeVar SymbolFlags(0x0)
- Declarations:
--:   Alias
V SymbolFlags(0x0)
- Declarations:
--:   Variable
concat SymbolFlags(0x0)
- Declarations:
--:   Function
first SymbolFlags(0x0)
- Declarations:
--:   Function
generic_meta SymbolFlags(0x0)
- Declarations:
--:   Variable
generic_meta_instance SymbolFlags(0x0)
- Declarations:
--:   Variable
iter1 SymbolFlags(0x0)
- Declarations:
--:   Variable
iter2 SymbolFlags(0x0)
- Declarations:
--:   Variable
log_var SymbolFlags(0x0)
- Declarations:
--:   Variable
my_map1 SymbolFlags(0x0)
- Declarations:
--:   Variable
my_map2 SymbolFlags(0x0)
- Declarations:
--:   Variable
my_mapping SymbolFlags(0x0)
- Declarations:
--:   Variable
pair1 SymbolFlags(0x0)
- Declarations:
--:   Variable
pair2 SymbolFlags(0x0)
- Declarations:
--:   Variable
test_my_iterable_any SymbolFlags(0x0)
- Declarations:
--:   Function
test_my_map SymbolFlags(0x0)
- Declarations:
--:   Function
zero_all_vars SymbolFlags(0x0)
- Declarations:
--:   Function

Symbols in log
message SymbolFlags(0x0)
- Declarations:
--:   Parameter
msg SymbolFlags(0x0)
- Declarations:
--:   Variable
self SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in set
new SymbolFlags(0x0)
- Declarations:
--:   Parameter
self SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in test_my_iterable_any
m SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in test_my_map
a SymbolFlags(0x0)
- Declarations:
--:   Variable
b SymbolFlags(0x0)
- Declarations:
--:   Variable
m1 SymbolFlags(0x0)
- Declarations:
--:   Parameter
m2 SymbolFlags(0x0)
- Declarations:
--:   Parameter

Symbols in zero_all_vars
vars SymbolFlags(0x0)
- Declarations:
--:   Parameter

Scopes:

Scope GenericMeta
Scope GenericMetaInstance
Scope LinkedList
Scope LoggedVar
Scope MyIter1
Scope MyIter2
Scope MyIterableAny
Scope MyMap1
Scope MyMap2
Scope MyMapping
Scope Pair1
Scope Pair2
Scope __init__
Scope concat
Scope first
Scope get
Scope global
Scope log
Scope set
Scope test_my_iterable_any
Scope test_my_map
Scope zero_all_vars
