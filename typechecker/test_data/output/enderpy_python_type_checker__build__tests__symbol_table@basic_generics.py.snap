---
source: typechecker/src/build.rs
description: "from typing import TypeVar, Generic, Sequence\nfrom logging import Logger\n\nT = TypeVar('T')\n\ndef first(l: Sequence[T]) -> T:\n    return l[0]\n\nfirst([1, 2, 3]) # return type type parameter\n\n\nAnyStr = TypeVar('AnyStr', str, bytes)\n\ndef concat(x: AnyStr, y: AnyStr) -> AnyStr:\n    return x + y\n\n# > Specifying a single constraint is disallowed.\n\nBadConstraint1 = TypeVar('BadConstraint1', str)  # Type error\n\n# > Note: those types cannot be parameterized by type variables\n\nBadConstraint2 = TypeVar('BadConstraint2', str, T)  # Type error\n\n\nclass LoggedVar(Generic[T]):\n    def __init__(self, value: T, name: str, logger: Logger) -> None:\n        self.name = name\n        self.logger = logger\n        self.value = value\n\n    def set(self, new: T) -> None:\n        self.log('Set ' + repr(self.value))\n        self.value = new\n\n    def get(self) -> T:\n        self.log('Get ' + repr(self.value))\n        return self.value\n\n    def log(self, message: str) -> None:\n        self.logger.info('{}: {}'.format(self.name, message))\n"
expression: result
input_file: typechecker/test_data/inputs/basic_generics.py
---
Symbols in LoggedVar
__init__
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
get
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
log
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
logger
SymbolFlags(
    INSTANCE_MEMBER,
)
- Declarations:
id: [ID]
name
SymbolFlags(
    INSTANCE_MEMBER,
)
- Declarations:
id: [ID]
set
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
value
SymbolFlags(
    INSTANCE_MEMBER,
)
- Declarations:
id: [ID]

Symbols in __init__
logger
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
name
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
self
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
value
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Symbols in concat
x
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
y
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Symbols in first
l
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Symbols in get
self
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Symbols in global
AnyStr
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
BadConstraint1
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
BadConstraint2
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
Generic
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
LoggedVar
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
Logger
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
Sequence
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
T
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
TypeVar
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
concat
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
first
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Symbols in log
message
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
self
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Symbols in set
new
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]
self
SymbolFlags(
    0x0,
)
- Declarations:
id: [ID]

Scopes:

Scope LoggedVar
Scope __init__
Scope concat
Scope first
Scope get
Scope global
Scope log
Scope set

