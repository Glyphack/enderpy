---
source: typechecker/src/type_check/type_evaluator.rs
description: "print(None)\n"
expression: result
input_file: typechecker/test_data/inputs/builtins.py
---
'print(None)': Callable(CallableType { name: "print", arguments: Arguments { node: Node { start: 69733, end: 69857 }, posonlyargs: [], args: [], vararg: Some(Arg { node: Node { start: 69734, end: 69748 }, arg: "values", annotation: Some(Name(Name { node: Node { start: 69742, end: 69748 }, id: "object" })) }), kwonlyargs: [Arg { node: Node { start: 69750, end: 69771 }, arg: "sep", annotation: Some(BinOp(BinOp { node: Node { start: 69755, end: 69765 }, op: BitOr, left: Name(Name { node: Node { start: 69755, end: 69758 }, id: "str" }), right: Constant(Constant { node: Node { start: 69761, end: 69765 }, value: None }) })) }, Arg { node: Node { start: 69773, end: 69795 }, arg: "end", annotation: Some(BinOp(BinOp { node: Node { start: 69778, end: 69788 }, op: BitOr, left: Name(Name { node: Node { start: 69778, end: 69781 }, id: "str" }), right: Constant(Constant { node: Node { start: 69784, end: 69788 }, value: None }) })) }, Arg { node: Node { start: 69797, end: 69844 }, arg: "file", annotation: Some(BinOp(BinOp { node: Node { start: 69803, end: 69837 }, op: BitOr, left: Subscript(Subscript { node: Node { start: 69803, end: 69830 }, value: Name(Name { node: Node { start: 69803, end: 69825 }, id: "_SupportsWriteAndFlush" }), slice: Name(Name { node: Node { start: 69826, end: 69829 }, id: "str" }) }), right: Constant(Constant { node: Node { start: 69833, end: 69837 }, value: None }) })) }, Arg { node: Node { start: 69846, end: 69857 }, arg: "flush", annotation: Some(Name(Name { node: Node { start: 69853, end: 69857 }, id: "bool" })) }], kw_defaults: [Some(Constant(Constant { node: Node { start: 69768, end: 69771 }, value: " " })), Some(Constant(Constant { node: Node { start: 69791, end: 69795 }, value: "\n" })), Some(Constant(Constant { node: Node { start: 69840, end: 69844 }, value: None })), None], kwarg: None, defaults: [] }, return_type: None })
'None': None
