---
source: typechecker/src/checker.rs
description: "1: \"\"\"\n2: Tests for basic usage of generics.\n3: \"\"\"\n4: \n5: # Specification: https://typing.readthedocs.io/en/latest/spec/generics.html#introduction\n6: \n7: from __future__ import annotations\n8: \n9: from collections.abc import Sequence\n10: from typing import Any, Generic, TypeVar, assert_type\n11: \n12: T = TypeVar(\"T\")\n13: \n14: # > Generics can be parameterized by using a factory available in\n15: # > ``typing`` called ``TypeVar``.\n16: \n17: \n18: def first(l: Sequence[T]) -> T:\n19:     return l[0]\n20: \n21: \n22: def test_first(seq_int: Sequence[int], seq_str: Sequence[str]) -> None:\n23:     assert_type(first(seq_int), int)\n24:     assert_type(first(seq_str), str)\n25: \n26: \n27: # > ``TypeVar`` supports constraining parametric types to a fixed set of\n28: # > possible types\n29: \n30: AnyStr = TypeVar(\"AnyStr\", str, bytes)\n31: \n32: \n33: def concat(x: AnyStr, y: AnyStr) -> AnyStr:\n34:     return x + y\n35: \n36: \n37: def test_concat(s: str, b: bytes, a: Any) -> None:\n38:     concat(s, s)  # OK\n39:     concat(b, b)  # OK\n40:     concat(s, b)  # E\n41:     concat(b, s)  # E\n42: \n43:     concat(s, a)  # OK\n44:     concat(a, b)  # OK\n45: \n46: \n47: # > Specifying a single constraint is disallowed.\n48: \n49: BadConstraint1 = TypeVar(\"BadConstraint1\", str)  # E\n50: \n51: # > Note: those types cannot be parameterized by type variables\n52: \n53: \n54: class Test(Generic[T]):\n55:     BadConstraint2 = TypeVar(\"BadConstraint2\", str, list[T])  # E\n56: \n57: \n58: # > Subtypes of types constrained by a type variable should be treated\n59: # > as their respective explicitly listed base types in the context of the\n60: # > type variable.\n61: \n62: \n63: class MyStr(str): ...\n64: \n65: \n66: def test_concat_subtype(s: str, b: bytes, a: Any, m: MyStr) -> None:\n67:     assert_type(concat(m, m), str)\n68:     assert_type(concat(m, s), str)\n69:     concat(m, b)  # E\n70: \n71:     # TODO: should these be str or Any?\n72:     # reveal_type(concat(m, a))\n73:     # reveal_type(concat(a, m))\n74: \n75: \n76: # Specification: https://typing.readthedocs.io/en/latest/spec/generics.html#user-defined-generic-classes\n77: \n78: # > You can include a ``Generic`` base class to define a user-defined class\n79: # > as generic.\n80: \n81: from logging import Logger\n82: from collections.abc import Iterable\n83: \n84: \n85: class LoggedVar(Generic[T]):\n86:     def __init__(self, value: T, name: str, logger: Logger) -> None:\n87:         self.name = name\n88:         self.logger = logger\n89:         self.value = value\n90: \n91:     def set(self, new: T) -> None:\n92:         self.log(\"Set \" + repr(self.value))\n93:         self.value = new\n94: \n95:     def get(self) -> T:\n96:         self.log(\"Get \" + repr(self.value))\n97:         return self.value\n98: \n99:     def log(self, message: str) -> None:\n100:         self.logger.info(\"{}: {}\".format(self.name, message))\n101: \n102: \n103: def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n104:     for var in vars:\n105:         var.set(0)\n106:         # assert_type(var.get(), int)\n107: \n108: \n109: # > A generic type can have any number of type variables, and type variables\n110: # > may be constrained.\n111: \n112: S = TypeVar(\"S\")\n113: \n114: \n115: class Pair1(Generic[T, S]): ...\n116: \n117: \n118: # > Each type variable argument to ``Generic`` must be distinct.\n119: \n120: \n121: class Pair2(Generic[T, T]):  # E\n122:     ...\n123: \n124: \n125: # > The ``Generic[T]`` base class is redundant in simple cases where you\n126: # > subclass some other generic class and specify type variables for its\n127: # > parameters.\n128: \n129: from collections.abc import Iterator, Mapping\n130: \n131: \n132: class MyIter1(Iterator[T]): ...\n133: \n134: \n135: class MyIter2(Iterator[T], Generic[T]): ...\n136: \n137: \n138: def test_my_iter(m1: MyIter1[int], m2: MyIter2[int]):\n139:     assert_type(next(m1), int)\n140:     assert_type(next(m2), int)\n141: \n142: \n143: K = TypeVar(\"K\")\n144: V = TypeVar(\"V\")\n145: \n146: \n147: class MyMap1(Mapping[K, V], Generic[K, V]): ...\n148: \n149: \n150: # TODO: The generic values here are not correctly mapped to the mapping generic values. the first here should be the first in mapping. etc.\n151: class MyMap2(Mapping[K, V], Generic[V, K]): ...\n152: \n153: \n154: def test_my_map(m1: MyMap1[str, int], m2: MyMap2[int, str]):\n155:     assert_type(m1[\"key\"], int)\n156:     assert_type(m2[\"key\"], int)\n157: \n158:     m1[0]  # E\n159:     m2[0]  # E\n160: \n161: \n162: # # > You can use multiple inheritance with ``Generic``\n163: #\n164: # from collections.abc import Sized, Container\n165: #\n166: #\n167: # class LinkedList(Sized, Generic[T]): ...\n168: #\n169: #\n170: # class MyMapping(Iterable[tuple[K, V]], Container[tuple[K, V]], Generic[K, V]): ...\n171: #\n172: #\n173: # # > Subclassing a generic class without specifying type parameters assumes\n174: # # > ``Any`` for each position.  In the following example, ``MyIterable``\n175: # # > is not generic but implicitly inherits from ``Iterable[Any]``::\n176: #\n177: #\n178: # class MyIterableAny(Iterable):  # Same as Iterable[Any]\n179: #     ...\n180: #\n181: #\n182: # def test_my_iterable_any(m: MyIterableAny):\n183: #     assert_type(iter(m), Iterator[Any])\n184: #\n185: #\n186: # # > Generic metaclasses are not supported\n187: #\n188: #\n189: # class GenericMeta(type, Generic[T]): ...\n190: #\n191: #\n192: # class GenericMetaInstance(metaclass=GenericMeta[T]):  # E\n193: #     ...\n"
expression: result
---
Line 1: """

Expr types in the line --->:
        """
Tests for basic usage of generics.
""" => (class) str

---
Line 7: from __future__ import annotations

Expr types in the line --->:
        __future__  => Module
        annotations => (class) _Feature

---
Line 9: from collections.abc import Sequence

Expr types in the line --->:
        collections.abc  => Module
        Sequence => (class) typing.Sequence[TypeVar[_T_co, ]][]

---
Line 10: from typing import Any, Generic, TypeVar, assert_type

Expr types in the line --->:
        typing  => Module
        Any => (class) object
        Generic => (class) Generic
        TypeVar => TypeVar[, ]
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]

---
Line 12: T = TypeVar("T")

Expr types in the line --->:
        T => TypeVar[T, ]
        TypeVar => TypeVar[, ]
        TypeVar("T") => TypeVar[T, ]
        "T" => (class) str

---
Line 18: def first(l: Sequence[T]) -> T:

Expr types in the line --->:
        first => (function) Callable (pos: (class) typing.Sequence[TypeVar[_T_co, ]][TypeVar[T, ]]): TypeVar[T, ]
        l: Sequence[T] => (instance) typing.Sequence[TypeVar[T, ]]
        Sequence[T] => (class) typing.Sequence[TypeVar[_T_co, ]][TypeVar[T, ]]
        T => TypeVar[T, ]

---
Line 19:     return l[0]

Expr types in the line --->:
        l => (instance) typing.Sequence[TypeVar[T, ]]
        l[0] => Unknown
        0 => (class) int

---
Line 22: def test_first(seq_int: Sequence[int], seq_str: Sequence[str]) -> None:

Expr types in the line --->:
        test_first => (function) Callable (pos: (class) typing.Sequence[TypeVar[_T_co, ]][(class) int], pos: (class) typing.Sequence[TypeVar[_T_co, ]][Unknown]): None
        seq_int: Sequence[int] => (instance) typing.Sequence[(class) int]
        Sequence[int] => (class) typing.Sequence[TypeVar[_T_co, ]][(class) int]
        seq_str: Sequence[str] => (instance) typing.Sequence[Unknown]
        Sequence[str] => (class) typing.Sequence[TypeVar[_T_co, ]][Unknown]
        None => None

---
Line 23:     assert_type(first(seq_int), int)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(first(seq_int), int) => (class) int
        first => (function) Callable (pos: (class) typing.Sequence[TypeVar[_T_co, ]][TypeVar[T, ]]): TypeVar[T, ]
        first(seq_int) => (class) int
        seq_int => (instance) typing.Sequence[(class) int]
        int => (class) int

---
Line 24:     assert_type(first(seq_str), str)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(first(seq_str), str) => Unknown
        first => (function) Callable (pos: (class) typing.Sequence[TypeVar[_T_co, ]][TypeVar[T, ]]): TypeVar[T, ]
        first(seq_str) => Unknown
        seq_str => (instance) typing.Sequence[Unknown]
        str => (class) str

---
Line 30: AnyStr = TypeVar("AnyStr", str, bytes)

Expr types in the line --->:
        AnyStr => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        TypeVar => TypeVar[, ]
        TypeVar("AnyStr", str, bytes) => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        "AnyStr" => (class) str
        str => (class) str
        bytes => (class) builtins.bytes[(class) int][]

---
Line 33: def concat(x: AnyStr, y: AnyStr) -> AnyStr:

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        x: AnyStr => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        AnyStr => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        y: AnyStr => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        AnyStr => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        AnyStr => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]

---
Line 34:     return x + y

Expr types in the line --->:
        x => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        x + y => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        y => TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]

---
Line 37: def test_concat(s: str, b: bytes, a: Any) -> None:

Expr types in the line --->:
        test_concat => (function) Callable (pos: (class) str, pos: (class) builtins.bytes[(class) int][], pos: (class) object): None
        s: str => (instance) str
        str => (class) str
        b: bytes => (instance) bytes
        bytes => (class) builtins.bytes[(class) int][]
        a: Any => (instance) object
        Any => (class) object
        None => None

---
Line 38:     concat(s, s)  # OK

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(s, s) => (instance) str
        s => (instance) str
        s => (instance) str

---
Line 39:     concat(b, b)  # OK

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(b, b) => (instance) bytes
        b => (instance) bytes
        b => (instance) bytes

---
Line 40:     concat(s, b)  # E

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(s, b) => Unknown
        s => (instance) str
        b => (instance) bytes

---
Line 41:     concat(b, s)  # E

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(b, s) => Unknown
        b => (instance) bytes
        s => (instance) str

---
Line 43:     concat(s, a)  # OK

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(s, a) => Unknown
        s => (instance) str
        a => (instance) object

---
Line 44:     concat(a, b)  # OK

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(a, b) => Unknown
        a => (instance) object
        b => (instance) bytes

---
Line 49: BadConstraint1 = TypeVar("BadConstraint1", str)  # E

Expr types in the line --->:
        BadConstraint1 => Unknown
        TypeVar => TypeVar[, ]
        TypeVar("BadConstraint1", str) => Unknown
        "BadConstraint1" => (class) str
        str => (class) str

---
Line 54: class Test(Generic[T]):

Expr types in the line --->:
        Test => (class) generics_basic.Test[TypeVar[T, ]][]
        Generic => (class) Generic
        Generic[T] => (class) builtins.Generic[][TypeVar[T, ]]
        T => TypeVar[T, ]

---
Line 55:     BadConstraint2 = TypeVar("BadConstraint2", str, list[T])  # E

Expr types in the line --->:
        BadConstraint2 => Unknown
        TypeVar => TypeVar[, ]
        TypeVar("BadConstraint2", str, list[T]) => Unknown
        "BadConstraint2" => (class) str
        str => (class) str
        list => (class) builtins.list[TypeVar[_T, ]][]
        list[T] => (class) builtins.list[TypeVar[_T, ]][TypeVar[T, ]]
        T => TypeVar[T, ]

---
Line 63: class MyStr(str): ...

Expr types in the line --->:
        MyStr => (class) MyStr
        str => (class) str
        ... => Any

---
Line 66: def test_concat_subtype(s: str, b: bytes, a: Any, m: MyStr) -> None:

Expr types in the line --->:
        test_concat_subtype => (function) Callable (pos: (class) str, pos: (class) builtins.bytes[(class) int][], pos: (class) object, pos: (class) MyStr): None
        s: str => (instance) str
        str => (class) str
        b: bytes => (instance) bytes
        bytes => (class) builtins.bytes[(class) int][]
        a: Any => (instance) object
        Any => (class) object
        m: MyStr => (instance) MyStr
        MyStr => (class) MyStr
        None => None

---
Line 67:     assert_type(concat(m, m), str)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(concat(m, m), str) => (instance) MyStr
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(m, m) => (instance) MyStr
        m => (instance) MyStr
        m => (instance) MyStr
        str => (class) str

---
Line 68:     assert_type(concat(m, s), str)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(concat(m, s), str) => Unknown
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(m, s) => Unknown
        m => (instance) MyStr
        s => (instance) str
        str => (class) str

---
Line 69:     concat(m, b)  # E

Expr types in the line --->:
        concat => (function) Callable (pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]], pos: TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]): TypeVar[AnyStr, (class) str, (class) builtins.bytes[(class) int][]]
        concat(m, b) => Unknown
        m => (instance) MyStr
        b => (instance) bytes

---
Line 81: from logging import Logger

Expr types in the line --->:
        logging  => Module
        Logger => (class) Logger

---
Line 82: from collections.abc import Iterable

Expr types in the line --->:
        collections.abc  => Module
        Iterable => (class) typing.Iterable[TypeVar[_T_co, ]][]

---
Line 85: class LoggedVar(Generic[T]):

Expr types in the line --->:
        LoggedVar => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        Generic => (class) Generic
        Generic[T] => (class) builtins.Generic[][TypeVar[T, ]]
        T => TypeVar[T, ]

---
Line 86:     def __init__(self, value: T, name: str, logger: Logger) -> None:

Expr types in the line --->:
        __init__ => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][], pos: TypeVar[T, ], pos: (class) str, pos: (class) Logger): None
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        value: T => TypeVar[T, ]
        T => TypeVar[T, ]
        name: str => (instance) str
        str => (class) str
        logger: Logger => (instance) Logger
        Logger => (class) Logger
        None => None

---
Line 87:         self.name = name

Expr types in the line --->:
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        self.name => (instance) str
        name => (instance) str

---
Line 88:         self.logger = logger

Expr types in the line --->:
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        self.logger => (instance) Logger
        logger => (instance) Logger

---
Line 89:         self.value = value

Expr types in the line --->:
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        self.value => TypeVar[T, ]
        value => TypeVar[T, ]

---
Line 91:     def set(self, new: T) -> None:

Expr types in the line --->:
        set => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][], pos: TypeVar[T, ]): None
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        new: T => TypeVar[T, ]
        T => TypeVar[T, ]
        None => None

---
Line 92:         self.log("Set " + repr(self.value))

Expr types in the line --->:
        self.log => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][], pos: (class) str): None
        self.log("Set " + repr(self.value)) => None
        "Set " => (class) str
        "Set " + repr(self.value) => (class) str
        repr(self.value) => (class) str

---
Line 93:         self.value = new

Expr types in the line --->:
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        self.value => TypeVar[T, ]
        new => TypeVar[T, ]

---
Line 95:     def get(self) -> T:

Expr types in the line --->:
        get => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][]): TypeVar[T, ]
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        T => TypeVar[T, ]

---
Line 96:         self.log("Get " + repr(self.value))

Expr types in the line --->:
        self.log => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][], pos: (class) str): None
        self.log("Get " + repr(self.value)) => None
        "Get " => (class) str
        "Get " + repr(self.value) => (class) str
        repr(self.value) => (class) str

---
Line 97:         return self.value

Expr types in the line --->:
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        self.value => TypeVar[T, ]

---
Line 99:     def log(self, message: str) -> None:

Expr types in the line --->:
        log => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][], pos: (class) str): None
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        message: str => (instance) str
        str => (class) str
        None => None

---
Line 100:         self.logger.info("{}: {}".format(self.name, message))

Expr types in the line --->:
        self.logger.info => Unknown
        self.logger.info("{}: {}".format(self.name, message)) => Unknown
        "{}: {}".format => (function) Callable (pos: (class) LiteralString, *args: (class) LiteralString, **kwargs: (class) LiteralString): (class) LiteralString
        "{}: {}".format(self.name, message) => (class) LiteralString
        self => (class) generics_basic.LoggedVar[TypeVar[T, ]][]
        self.name => (instance) str
        message => (instance) str

---
Line 103: def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:

Expr types in the line --->:
        zero_all_vars => (function) Callable (pos: (class) typing.Iterable[TypeVar[_T_co, ]][(class) generics_basic.LoggedVar[TypeVar[T, ]][(class) int]]): None
        vars: Iterable[LoggedVar[int]] => (instance) typing.Iterable[(class) generics_basic.LoggedVar[TypeVar[T, ]][(class) int]]
        Iterable[LoggedVar[int]] => (class) typing.Iterable[TypeVar[_T_co, ]][(class) generics_basic.LoggedVar[TypeVar[T, ]][(class) int]]
        None => None

---
Line 104:     for var in vars:

Expr types in the line --->:
        var => (class) generics_basic.LoggedVar[TypeVar[T, ]][(class) int]
        vars => (instance) typing.Iterable[(class) generics_basic.LoggedVar[TypeVar[T, ]][(class) int]]

---
Line 105:         var.set(0)

Expr types in the line --->:
        var.set => (function) Callable (pos: (class) generics_basic.LoggedVar[TypeVar[T, ]][], pos: TypeVar[T, ]): None
        var.set(0) => None
        0 => (class) int

---
Line 112: S = TypeVar("S")

Expr types in the line --->:
        S => TypeVar[S, ]
        TypeVar => TypeVar[, ]
        TypeVar("S") => TypeVar[S, ]
        "S" => (class) str

---
Line 115: class Pair1(Generic[T, S]): ...

Expr types in the line --->:
        Pair1 => (class) generics_basic.Pair1[TypeVar[T, ], TypeVar[S, ]][]
        Generic => (class) Generic
        Generic[T, S] => (class) builtins.Generic[][TypeVar[T, ], TypeVar[S, ]]
        T => TypeVar[T, ]
        T, S] => (instance) builtins.tuple[Unknown]
        S => TypeVar[S, ]
        ... => Any

---
Line 121: class Pair2(Generic[T, T]):  # E

Expr types in the line --->:
        Pair2 => (class) generics_basic.Pair2[Unknown][]
        Generic => (class) Generic
        Generic[T, T] => (class) builtins.Generic[][TypeVar[T, ], TypeVar[T, ]]
        T => TypeVar[T, ]
        T, T] => (instance) builtins.tuple[TypeVar[T, ]]
        T => TypeVar[T, ]

---
Line 122:     ...

Expr types in the line --->:
        ... => Any

---
Line 129: from collections.abc import Iterator, Mapping

Expr types in the line --->:
        collections.abc  => Module
        Iterator => (class) typing.Iterator[TypeVar[_T_co, ]][]
        Mapping => (class) typing.Mapping[TypeVar[_KT, ], TypeVar[_VT_co, ]][]

---
Line 132: class MyIter1(Iterator[T]): ...

Expr types in the line --->:
        MyIter1 => (class) generics_basic.MyIter1[TypeVar[T, ]][]
        Iterator => (class) typing.Iterator[TypeVar[_T_co, ]][]
        Iterator[T] => (class) typing.Iterator[TypeVar[_T_co, ]][TypeVar[T, ]]
        T => TypeVar[T, ]
        ... => Any

---
Line 135: class MyIter2(Iterator[T], Generic[T]): ...

Expr types in the line --->:
        MyIter2 => (class) generics_basic.MyIter2[TypeVar[T, ]][]
        Iterator => (class) typing.Iterator[TypeVar[_T_co, ]][]
        Iterator[T] => (class) typing.Iterator[TypeVar[_T_co, ]][TypeVar[T, ]]
        T => TypeVar[T, ]
        Generic => (class) Generic
        Generic[T] => (class) builtins.Generic[][TypeVar[T, ]]
        T => TypeVar[T, ]
        ... => Any

---
Line 138: def test_my_iter(m1: MyIter1[int], m2: MyIter2[int]):

Expr types in the line --->:
        test_my_iter => (function) Callable (pos: (class) generics_basic.MyIter1[TypeVar[T, ]][(class) int], pos: (class) generics_basic.MyIter2[TypeVar[T, ]][(class) int]): Unknown
        m1: MyIter1[int] => (instance) generics_basic.MyIter1[(class) int]
        MyIter1[int] => (class) generics_basic.MyIter1[TypeVar[T, ]][(class) int]
        m2: MyIter2[int] => (instance) generics_basic.MyIter2[(class) int]
        MyIter2[int] => (class) generics_basic.MyIter2[TypeVar[T, ]][(class) int]

---
Line 139:     assert_type(next(m1), int)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(next(m1), int) => (class) int
        next => (function) Callable (pos: (class) __init__.SupportsNext[TypeVar[_T_co, ]][TypeVar[_T, ]]): TypeVar[_T, ]
        next(m1) => (class) int
        m1 => (instance) generics_basic.MyIter1[(class) int]
        int => (class) int

---
Line 140:     assert_type(next(m2), int)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(next(m2), int) => (class) int
        next => (function) Callable (pos: (class) __init__.SupportsNext[TypeVar[_T_co, ]][TypeVar[_T, ]]): TypeVar[_T, ]
        next(m2) => (class) int
        m2 => (instance) generics_basic.MyIter2[(class) int]
        int => (class) int

---
Line 143: K = TypeVar("K")

Expr types in the line --->:
        K => TypeVar[K, ]
        TypeVar => TypeVar[, ]
        TypeVar("K") => TypeVar[K, ]
        "K" => (class) str

---
Line 144: V = TypeVar("V")

Expr types in the line --->:
        V => TypeVar[V, ]
        TypeVar => TypeVar[, ]
        TypeVar("V") => TypeVar[V, ]
        "V" => (class) str

---
Line 147: class MyMap1(Mapping[K, V], Generic[K, V]): ...

Expr types in the line --->:
        MyMap1 => (class) generics_basic.MyMap1[TypeVar[K, ], TypeVar[V, ]][]
        Mapping => (class) typing.Mapping[TypeVar[_KT, ], TypeVar[_VT_co, ]][]
        Mapping[K, V] => (class) typing.Mapping[TypeVar[_KT, ], TypeVar[_VT_co, ]][TypeVar[K, ], TypeVar[V, ]]
        K => TypeVar[K, ]
        K, V] => (instance) builtins.tuple[Unknown]
        V => TypeVar[V, ]
        Generic => (class) Generic
        Generic[K, V] => (class) builtins.Generic[][TypeVar[K, ], TypeVar[V, ]]
        K => TypeVar[K, ]
        K, V] => (instance) builtins.tuple[Unknown]
        V => TypeVar[V, ]
        ... => Any

---
Line 151: class MyMap2(Mapping[K, V], Generic[V, K]): ...

Expr types in the line --->:
        MyMap2 => (class) generics_basic.MyMap2[TypeVar[K, ], TypeVar[V, ]][]
        Mapping => (class) typing.Mapping[TypeVar[_KT, ], TypeVar[_VT_co, ]][]
        Mapping[K, V] => (class) typing.Mapping[TypeVar[_KT, ], TypeVar[_VT_co, ]][TypeVar[K, ], TypeVar[V, ]]
        K => TypeVar[K, ]
        K, V] => (instance) builtins.tuple[Unknown]
        V => TypeVar[V, ]
        Generic => (class) Generic
        Generic[V, K] => (class) builtins.Generic[][TypeVar[V, ], TypeVar[K, ]]
        V => TypeVar[V, ]
        V, K] => (instance) builtins.tuple[Unknown]
        K => TypeVar[K, ]
        ... => Any

---
Line 154: def test_my_map(m1: MyMap1[str, int], m2: MyMap2[int, str]):

Expr types in the line --->:
        test_my_map => (function) Callable (pos: (class) generics_basic.MyMap1[TypeVar[K, ], TypeVar[V, ]][(class) str, (class) int], pos: (class) generics_basic.MyMap2[TypeVar[K, ], TypeVar[V, ]][(class) int, (class) str]): Unknown
        m1: MyMap1[str, int] => (instance) generics_basic.MyMap1[(class) str, (class) int]
        MyMap1[str, int] => (class) generics_basic.MyMap1[TypeVar[K, ], TypeVar[V, ]][(class) str, (class) int]
        m2: MyMap2[int, str] => (instance) generics_basic.MyMap2[(class) int, (class) str]
        MyMap2[int, str] => (class) generics_basic.MyMap2[TypeVar[K, ], TypeVar[V, ]][(class) int, (class) str]

---
Line 155:     assert_type(m1["key"], int)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(m1["key"], int) => Unknown
        m1 => (instance) generics_basic.MyMap1[(class) str, (class) int]
        m1["key"] => Unknown
        "key" => (class) str
        int => (class) int

---
Line 156:     assert_type(m2["key"], int)

Expr types in the line --->:
        assert_type => (function) Callable (pos: TypeVar[_T, ], pos: (class) object): TypeVar[_T, ]
        assert_type(m2["key"], int) => Unknown
        m2 => (instance) generics_basic.MyMap2[(class) int, (class) str]
        m2["key"] => Unknown
        "key" => (class) str
        int => (class) int

---
Line 158:     m1[0]  # E

Expr types in the line --->:
        m1 => (instance) generics_basic.MyMap1[(class) str, (class) int]
        m1[0] => Unknown
        0 => (class) int

---
Line 159:     m2[0]  # E

Expr types in the line --->:
        m2 => (instance) generics_basic.MyMap2[(class) int, (class) str]
        m2[0] => Unknown
        0 => (class) int

---
