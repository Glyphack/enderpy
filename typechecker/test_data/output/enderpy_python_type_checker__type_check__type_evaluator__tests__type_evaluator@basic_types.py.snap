---
source: typechecker/src/type_check/type_evaluator.rs
description: "1: a = 1\n2: b = \"1\"\n3: c = True\n4: d = False\n5: a + int(b)\n6: \n7: \n8: a + c\n9: \n10: def func(param1: int) -> int:\n11: \treturn param1 + a\n12: \n13: class C:\n14: \tcls_attribute = 1\n15: \n16: \tdef __init__(self, x: int):\n17: \t\tprint(self.cls_attribute)\n18: \t\tself.x = float(x)\n19: \t\tprint(self.x)\n20: \n21: \tdef add(self, value: int):\n22: \t\tself.cls_attribute += value\n23: \n24: \tdef get_attr(self) -> int:\n25: \t\treturn self.cls_attribute\n26: \n27: \tdef\tget_x(self) -> float:\n28: \t\treturn self.x\n29: \n30: t = C(0)\n31: t.add(2)\n32: t.cls_attribute\n33: t.x\n34: t.get_x()\n35: t.get_attr()\n36: \n37: l = [1,2,3]\n38: d = {\"a\": 1, \"b\": 2}\n39: s = {1,2,3}\n40: \n41: l.append(4)\n42: \n"
expression: result
input_file: typechecker/test_data/inputs/basic_types.py
---
Line 1: a = 1

Expr types in the line --->:
        "1" => int

---
Line 2: b = "1"

Expr types in the line --->:
        "\"1\"" => str

---
Line 3: c = True

Expr types in the line --->:
        "True" => bool

---
Line 4: d = False

Expr types in the line --->:
        "False" => bool

---
Line 5: a + int(b)

Expr types in the line --->:
        "a" => int
        "int(b)" => int

---
Line 8: a + c

Expr types in the line --->:
        "a" => int
        "c" => bool

---
Line 11: 	return param1 + a

Expr types in the line --->:
        "param1" => int
        "a" => int
        "param1 + a" => int

---
Line 14: 	cls_attribute = 1

Expr types in the line --->:
        "1" => int

---
Line 17: 		print(self.cls_attribute)

Expr types in the line --->:
        "print(self.cls_attribute)" => None
        "self.cls_attribute" => int

---
Line 18: 		self.x = float(x)

Expr types in the line --->:
        "float(x)" => float

---
Line 19: 		print(self.x)

Expr types in the line --->:
        "print(self.x)" => None
        "self.x" => float

---
Line 25: 		return self.cls_attribute

Expr types in the line --->:
        "self.cls_attribute" => int

---
Line 28: 		return self.x

Expr types in the line --->:
        "self.x" => float

---
Line 30: t = C(0)

Expr types in the line --->:
        "C(0)" => C

---
Line 31: t.add(2)

Expr types in the line --->:
        "t.add(2)" => None
        "2" => int

---
Line 34: t.get_x()

Expr types in the line --->:
        "t.get_x()" => float

---
Line 35: t.get_attr()

Expr types in the line --->:
        "t.get_attr()" => int

---
Line 37: l = [1,2,3]

Expr types in the line --->:
        "[1,2,3]" => list[int]

---
Line 38: d = {"a": 1, "b": 2}

Expr types in the line --->:
        "{\"a\": 1, \"b\": 2}" => dict[str, int]

---
Line 39: s = {1,2,3}

Expr types in the line --->:
        "{1,2,3}" => set[int]

---
Line 41: l.append(4)

Expr types in the line --->:
        "l.append(4)" => None
        "4" => int

---

