---
source: typechecker/src/type_check/type_evaluator.rs
description: "# define variables with various types for testing\na = 1\nb = 2\nc = True\nd = False\ne = \"hello\"\nf = \"world\"\njoined_str = f\"{e} {f}\"\n\ng = [1,2,3]\nh = (1,2,3)\ni = {1,2,3}\nj = {\"a\":1,\"b\":2,\"c\":3}\nk = None\n\nbool_op = True and False\n\nbin_op = a + b\nunary_op1 = -a\nunary_op2 = not c\nunaray_op3 = ~a\nunaray_op4 = +a\n\nnamed = (a := 1)\n\ngenerator = (x for x in g)\n\ngg = (1, \"str\")\n\n\n"
expression: result
input_file: typechecker/test_data/inputs/type_eval_vars.py
---
'1': Int
'2': Int
'True': Bool
'False': Bool
'"hello"': Str
'"world"': Str
'f"{e} {f}"': Str
'[1,2,3]': Class(ClassType { details: Class { name: "list", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 43505, end: 46298 } }, methods: ["__init__", "__init__", "copy", "append", "extend", "pop", "index", "count", "insert", "remove", "sort", "sort", "__len__", "__iter__", "__getitem__", "__getitem__", "__setitem__", "__setitem__", "__delitem__", "__add__", "__add__", "__iadd__", "__mul__", "__rmul__", "__imul__", "__contains__", "__reversed__", "__gt__", "__ge__", "__lt__", "__le__", "__eq__"], attributes: {}, special: false }, type_parameters: [Int] })
'(1,2,3': Class(ClassType { details: Class { name: "tuple", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 41204, end: 42587 } }, methods: ["__new__", "__len__", "__contains__", "__getitem__", "__getitem__", "__iter__", "__lt__", "__le__", "__gt__", "__ge__", "__eq__", "__hash__", "__add__", "__add__", "__mul__", "__rmul__", "count", "index"], attributes: {}, special: false }, type_parameters: [Int] })
'{1,2,3}': Class(ClassType { details: Class { name: "set", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 49982, end: 52187 } }, methods: ["__init__", "__init__", "add", "copy", "difference", "difference_update", "discard", "intersection", "intersection_update", "isdisjoint", "issubset", "issuperset", "remove", "symmetric_difference", "symmetric_difference_update", "union", "update", "__len__", "__contains__", "__iter__", "__and__", "__iand__", "__or__", "__ior__", "__sub__", "__isub__", "__xor__", "__ixor__", "__le__", "__lt__", "__ge__", "__gt__", "__eq__"], attributes: {}, special: false }, type_parameters: [Int] })
'{"a":1,"b":2,"c":3}': Class(ClassType { details: Class { name: "dict", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 46298, end: 49982 } }, methods: ["__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__new__", "copy", "keys", "values", "items", "fromkeys", "fromkeys", "get", "get", "get", "pop", "pop", "pop", "__len__", "__getitem__", "__setitem__", "__delitem__", "__iter__", "__eq__"], attributes: {}, special: false }, type_parameters: [Str, Int] })
'None': None
'True and False': Bool
'a + b': Int
'-a': Int
'not c': Bool
'~a': Int
'+a': Int
'a := 1': Int
'(x for x in g)': Unknown
'(1, "str"': Class(ClassType { details: Class { name: "tuple", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 41204, end: 42587 } }, methods: ["__new__", "__len__", "__contains__", "__getitem__", "__getitem__", "__iter__", "__lt__", "__le__", "__gt__", "__ge__", "__eq__", "__hash__", "__add__", "__add__", "__mul__", "__rmul__", "count", "index"], attributes: {}, special: false }, type_parameters: [Unknown] })
