---
source: typechecker/src/type_check/type_evaluator.rs
description: "1: # define variables with various types for testing\n2: a = 1\n3: b = 2\n4: c = True\n5: d = False\n6: e = \"hello\"\n7: f = \"world\"\n8: joined_str = f\"{e} {f}\"\n9: \n10: g = [1,2,3]\n11: h = (1,2,3)\n12: i = {1,2,3}\n13: j = {\"a\":1,\"b\":2,\"c\":3}\n14: k = None\n15: \n16: bool_op = True and False\n17: \n18: bin_op = a + b\n19: unary_op1 = -a\n20: unary_op2 = not c\n21: unaray_op3 = ~a\n22: unaray_op4 = +a\n23: \n24: named = (a := 1)\n25: \n26: generator = (x for x in g)\n27: \n28: gg = (1, \"str\")\n29: \n30: \n"
expression: result
input_file: typechecker/test_data/inputs/type_eval_vars.py
---
Line 2: a = 1

Expr types in the line --->:
        "1" => Int

---
Line 3: b = 2

Expr types in the line --->:
        "2" => Int

---
Line 4: c = True

Expr types in the line --->:
        "True" => Bool

---
Line 5: d = False

Expr types in the line --->:
        "False" => Bool

---
Line 6: e = "hello"

Expr types in the line --->:
        "\"hello\"" => Str

---
Line 7: f = "world"

Expr types in the line --->:
        "\"world\"" => Str

---
Line 8: joined_str = f"{e} {f}"

Expr types in the line --->:
        "f\"{e} {f}\"" => Str

---
Line 10: g = [1,2,3]

Expr types in the line --->:
        "[1,2,3]" => Class(ClassType { details: Class { name: "list", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 43505, end: 46298 } }, methods: ["__init__", "__init__", "copy", "append", "extend", "pop", "index", "count", "insert", "remove", "sort", "sort", "__len__", "__iter__", "__getitem__", "__getitem__", "__setitem__", "__setitem__", "__delitem__", "__add__", "__add__", "__iadd__", "__mul__", "__rmul__", "__imul__", "__contains__", "__reversed__", "__gt__", "__ge__", "__lt__", "__le__", "__eq__"], attributes: {}, special: false }, type_parameters: [Int] })

---
Line 11: h = (1,2,3)

Expr types in the line --->:
        "(1,2,3" => Class(ClassType { details: Class { name: "tuple", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 41204, end: 42587 } }, methods: ["__new__", "__len__", "__contains__", "__getitem__", "__getitem__", "__iter__", "__lt__", "__le__", "__gt__", "__ge__", "__eq__", "__hash__", "__add__", "__add__", "__mul__", "__rmul__", "count", "index"], attributes: {}, special: false }, type_parameters: [Int] })

---
Line 12: i = {1,2,3}

Expr types in the line --->:
        "{1,2,3}" => Class(ClassType { details: Class { name: "set", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 49982, end: 52187 } }, methods: ["__init__", "__init__", "add", "copy", "difference", "difference_update", "discard", "intersection", "intersection_update", "isdisjoint", "issubset", "issuperset", "remove", "symmetric_difference", "symmetric_difference_update", "union", "update", "__len__", "__contains__", "__iter__", "__and__", "__iand__", "__or__", "__ior__", "__sub__", "__isub__", "__xor__", "__ixor__", "__le__", "__lt__", "__ge__", "__gt__", "__eq__"], attributes: {}, special: false }, type_parameters: [Int] })

---
Line 13: j = {"a":1,"b":2,"c":3}

Expr types in the line --->:
        "{\"a\":1,\"b\":2,\"c\":3}" => Class(ClassType { details: Class { name: "dict", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 46298, end: 49982 } }, methods: ["__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "__new__", "copy", "keys", "values", "items", "fromkeys", "fromkeys", "get", "get", "get", "pop", "pop", "pop", "__len__", "__getitem__", "__setitem__", "__delitem__", "__iter__", "__eq__"], attributes: {}, special: false }, type_parameters: [Str, Int] })

---
Line 14: k = None

Expr types in the line --->:
        "None" => None

---
Line 16: bool_op = True and False

Expr types in the line --->:
        "True and False" => Bool

---
Line 18: bin_op = a + b

Expr types in the line --->:
        "a + b" => Int

---
Line 19: unary_op1 = -a

Expr types in the line --->:
        "-a" => Int

---
Line 20: unary_op2 = not c

Expr types in the line --->:
        "not c" => Bool

---
Line 21: unaray_op3 = ~a

Expr types in the line --->:
        "~a" => Int

---
Line 22: unaray_op4 = +a

Expr types in the line --->:
        "+a" => Int

---
Line 24: named = (a := 1)

Expr types in the line --->:
        "a := 1" => Int

---
Line 26: generator = (x for x in g)

Expr types in the line --->:
        "(x for x in g)" => Unknown

---
Line 28: gg = (1, "str")

Expr types in the line --->:
        "(1, \"str\"" => Class(ClassType { details: Class { name: "tuple", declaration_path: DeclarationPath { module_name: [TYPESHED].stdlib/builtins.pyi", node: Node { start: 41204, end: 42587 } }, methods: ["__new__", "__len__", "__contains__", "__getitem__", "__getitem__", "__iter__", "__lt__", "__le__", "__gt__", "__ge__", "__eq__", "__hash__", "__add__", "__add__", "__mul__", "__rmul__", "count", "index"], attributes: {}, special: false }, type_parameters: [Unknown] })

---

