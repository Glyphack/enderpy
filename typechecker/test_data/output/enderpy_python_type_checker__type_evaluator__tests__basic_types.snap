---
source: typechecker/src/type_evaluator.rs
description: "1: a = 1\n2: b = \"1\"\n3: c = True\n4: d = False\n5: a + int(b)\n6: \n7: \n8: a + c\n9: \n10: \n11: def func(param1: int) -> int:\n12:     return param1 + a\n13: \n14: \n15: class C:\n16:     cls_attribute = 1\n17: \n18:     def __init__(self, x: int):\n19:         print(self.cls_attribute)\n20:         self.x = float(x)\n21:         print(self.x)\n22: \n23:     def add(self, value: int) -> None:\n24:         self.cls_attribute += value\n25: \n26:     def get_attr(self) -> int:\n27:         return self.cls_attribute\n28: \n29:     def get_x(self) -> float:\n30:         return self.x\n31: \n32: \n33: t = C(0)\n34: t.add(2)\n35: t.cls_attribute\n36: t.x\n37: t.get_x()\n38: t.get_attr()\n39: \n40: l = [1, 2, 3]\n41: d = {\"a\": 1, \"b\": 2}\n42: s = {1, 2, 3}\n43: \n44: l.append(4)\n"
expression: result
---
Line 1: a = 1

Expr types in the line --->:
        "1" => int

---
Line 2: b = "1"

Expr types in the line --->:
        "\"1\"" => str

---
Line 3: c = True

Expr types in the line --->:
        "True" => bool

---
Line 4: d = False

Expr types in the line --->:
        "False" => bool

---
Line 5: a + int(b)

Expr types in the line --->:
        "a" => int
        "int(b)" => int

---
Line 8: a + c

Expr types in the line --->:
        "a" => int
        "c" => bool

---
Line 12:     return param1 + a

Expr types in the line --->:
        "param1" => int
        "a" => int
        "param1 + a" => int

---
Line 16:     cls_attribute = 1

Expr types in the line --->:
        "1" => int

---
Line 19:         print(self.cls_attribute)

Expr types in the line --->:
        "print(self.cls_attribute)" => None
        "self.cls_attribute" => int

---
Line 20:         self.x = float(x)

Expr types in the line --->:
        "float(x)" => float

---
Line 21:         print(self.x)

Expr types in the line --->:
        "print(self.x)" => None
        "self.x" => float

---
Line 27:         return self.cls_attribute

Expr types in the line --->:
        "self.cls_attribute" => int

---
Line 30:         return self.x

Expr types in the line --->:
        "self.x" => float

---
Line 33: t = C(0)

Expr types in the line --->:
        "C(0)" => C

---
Line 34: t.add(2)

Expr types in the line --->:
        "t.add(2)" => None
        "2" => int

---
Line 37: t.get_x()

Expr types in the line --->:
        "t.get_x()" => float

---
Line 38: t.get_attr()

Expr types in the line --->:
        "t.get_attr()" => int

---
Line 40: l = [1, 2, 3]

Expr types in the line --->:
        "[1, 2, 3]" => builtins.list[int]

---
Line 41: d = {"a": 1, "b": 2}

Expr types in the line --->:
        "{\"a\": 1, \"b\": 2}" => builtins.dict[str, int]

---
Line 42: s = {1, 2, 3}

Expr types in the line --->:
        "{1, 2, 3}" => builtins.set[int]

---
Line 44: l.append(4)

Expr types in the line --->:
        "l.append(4)" => None
        "4" => int

---
