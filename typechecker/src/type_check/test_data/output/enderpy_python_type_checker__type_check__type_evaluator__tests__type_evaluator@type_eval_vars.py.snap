---
source: typechecker/src/type_check/type_evaluator.rs
description: "# define variables with various types for testing\na = 1\nb = 2\nc = True\nd = False\ne = \"hello\"\nf = \"world\"\njoined_str = f\"{e} {f}\"\n\ng = [1,2,3]\nh = (1,2,3)\ni = {1,2,3}\nj = {\"a\":1,\"b\":2,\"c\":3}\nk = None\n\nbool_op = True and False\n\nbin_op = a + b\nunary_op1 = -a\nunary_op2 = not c\nunaray_op3 = ~a\nunaray_op4 = +a\n\nnamed = (a := 1)\n\ngenerator = (x for x in g)\n\ngg = (1, \"str\")\n\n\n"
expression: result
input_file: typechecker/src/type_check/test_data/inputs/type_eval_vars.py
---
[
    (
        "(line: 1, character: 4):(line: 1, character: 5)",
        KnownValue(
            KnownValue {
                literal_value: Int(
                    "1",
                ),
            },
        ),
    ),
    (
        "(line: 10, character: 4):(line: 10, character: 10)",
        Class(
            ClassType {
                name: "builtins.tuple",
                args: [
                    Unknown,
                ],
            },
        ),
    ),
    (
        "(line: 11, character: 4):(line: 11, character: 11)",
        Class(
            ClassType {
                name: "builtins.set",
                args: [
                    Unknown,
                ],
            },
        ),
    ),
    (
        "(line: 12, character: 4):(line: 12, character: 23)",
        Class(
            ClassType {
                name: "builtins.dict",
                args: [
                    Unknown,
                    Unknown,
                ],
            },
        ),
    ),
    (
        "(line: 13, character: 4):(line: 13, character: 8)",
        KnownValue(
            KnownValue {
                literal_value: None,
            },
        ),
    ),
    (
        "(line: 15, character: 10):(line: 15, character: 24)",
        Bool,
    ),
    (
        "(line: 17, character: 9):(line: 17, character: 14)",
        Unknown,
    ),
    (
        "(line: 18, character: 12):(line: 18, character: 14)",
        KnownValue(
            KnownValue {
                literal_value: Int(
                    "1",
                ),
            },
        ),
    ),
    (
        "(line: 19, character: 12):(line: 19, character: 17)",
        Bool,
    ),
    (
        "(line: 2, character: 4):(line: 2, character: 5)",
        KnownValue(
            KnownValue {
                literal_value: Int(
                    "2",
                ),
            },
        ),
    ),
    (
        "(line: 20, character: 13):(line: 20, character: 15)",
        Unknown,
    ),
    (
        "(line: 21, character: 13):(line: 21, character: 15)",
        KnownValue(
            KnownValue {
                literal_value: Int(
                    "1",
                ),
            },
        ),
    ),
    (
        "(line: 23, character: 9):(line: 23, character: 15)",
        KnownValue(
            KnownValue {
                literal_value: Int(
                    "1",
                ),
            },
        ),
    ),
    (
        "(line: 25, character: 12):(line: 25, character: 26)",
        Unknown,
    ),
    (
        "(line: 27, character: 5):(line: 27, character: 14)",
        Class(
            ClassType {
                name: "builtins.tuple",
                args: [
                    Unknown,
                ],
            },
        ),
    ),
    (
        "(line: 3, character: 4):(line: 3, character: 8)",
        KnownValue(
            KnownValue {
                literal_value: Bool(
                    true,
                ),
            },
        ),
    ),
    (
        "(line: 4, character: 4):(line: 4, character: 9)",
        KnownValue(
            KnownValue {
                literal_value: Bool(
                    false,
                ),
            },
        ),
    ),
    (
        "(line: 5, character: 4):(line: 5, character: 11)",
        KnownValue(
            KnownValue {
                literal_value: Str(
                    "hello",
                ),
            },
        ),
    ),
    (
        "(line: 6, character: 4):(line: 6, character: 11)",
        KnownValue(
            KnownValue {
                literal_value: Str(
                    "world",
                ),
            },
        ),
    ),
    (
        "(line: 7, character: 13):(line: 7, character: 23)",
        Str,
    ),
    (
        "(line: 9, character: 4):(line: 9, character: 11)",
        Class(
            ClassType {
                name: "builtins.list",
                args: [
                    Unknown,
                ],
            },
        ),
    ),
]
