---
source: typechecker/src/type_check/type_evaluator.rs
description: "# define variables with various types for testing\na = 1\nb = 2\nc = True\nd = False\ne = \"hello\"\nf = \"world\"\njoined_str = f\"{e} {f}\"\n\ng = [1,2,3]\nh = (1,2,3)\ni = {1,2,3}\nj = {\"a\":1,\"b\":2,\"c\":3}\nk = None\n\nbool_op = True and False\n\nbin_op = a + b\nunary_op1 = -a\nunary_op2 = not c\nunaray_op3 = ~a\nunaray_op4 = +a\n\nnamed = (a := 1)\n\ngenerator = (x for x in g)\n\ngg = (1, \"str\")\n\n\n"
expression: result
---
[
    (
        "a",
        "Int",
    ),
    (
        "b",
        "Int",
    ),
    (
        "bin_op",
        "Int",
    ),
    (
        "bool_op",
        "Bool",
    ),
    (
        "c",
        "Bool",
    ),
    (
        "d",
        "Bool",
    ),
    (
        "e",
        "Str",
    ),
    (
        "f",
        "Str",
    ),
    (
        "g",
        "builtins.list[Int]",
    ),
    (
        "generator",
        "Unknown",
    ),
    (
        "gg",
        "builtins.tuple[Unknown]",
    ),
    (
        "h",
        "builtins.tuple[Int]",
    ),
    (
        "i",
        "builtins.set[Int]",
    ),
    (
        "j",
        "builtins.dict[Str, Int]",
    ),
    (
        "joined_str",
        "Str",
    ),
    (
        "k",
        "None",
    ),
    (
        "named",
        "Int",
    ),
    (
        "unaray_op3",
        "Int",
    ),
    (
        "unaray_op4",
        "Int",
    ),
    (
        "unary_op1",
        "Int",
    ),
    (
        "unary_op2",
        "Bool",
    ),
]
