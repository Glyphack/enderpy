---
source: parser/src/lexer/mod.rs
description: "def a(): pass\n\ndef a():\n    pass\n\ndef a(a, b, c): pass\n\ndef a(a, *b, **c): pass\n\ndef a(a,\nb,\nc): pass\n\n@decor\ndef a(): pass\n\n@decor\ndef f(a: 'annotation', b=1, c=2, *d, e, f=3, **g): pass\n\ndef func() -> None: pass\n\nasync def a(): pass\n\nasync def a():\n    pass\n\nasync def a(a, b, c): pass\n\ndef a[T](): pass\n\ndef a[T, U](): pass\n\ndef a[T: U](): pass\n\ndef a[T: U, V: W](): pass\n\ndef a[*T](): pass\n\ndef a[T, *U](): pass\n\ndef a[T: U, *V](): pass\n\ndef a[T: U, V: W, *X](): pass\n\ndef a[**T](): pass\n\ndef a[T, **U](): pass\n\ndef a[T: U, **V](): pass\n\ndef a[T: U, V: W, **X](): pass\n\ndef a[T, *U, **V](): pass\n\ndef a[T: U, *V, **W](): pass\n\ndef dataclass_transform(\n    *,\n    eq_default: bool = True,\n    order_default: bool = False,\n    kw_only_default: bool = False,\n    frozen_default: bool = False,  # on 3.11, runtime accepts it as part of kwargs\n    # this next annotation cannot be parsed need fix\n    field_specifiers: tuple[type[Any] | Callable[..., Any], ...] = (),\n    **kwargs: Any,\n) -> IdentityFunction: ...\n"
input_file: parser/test_data/inputs/function_def.py
---
0,3: Def
4,5: Identifier   a
5,6: (
6,7: )
7,8: :
9,13: Pass
13,14: NewLine
14,15: NL
15,18: Def
19,20: Identifier   a
20,21: (
21,22: )
22,23: :
23,24: NewLine
24,28: Indent
28,32: Pass
32,33: NewLine
33,34: NL
34,34: Dedent
34,37: Def
38,39: Identifier   a
39,40: (
40,41: Identifier   a
41,42: ,
43,44: Identifier   b
44,45: ,
46,47: Identifier   c
47,48: )
48,49: :
50,54: Pass
54,55: NewLine
55,56: NL
56,59: Def
60,61: Identifier   a
61,62: (
62,63: Identifier   a
63,64: ,
65,66: *
66,67: Identifier   b
67,68: ,
69,71: **
71,72: Identifier   c
72,73: )
73,74: :
75,79: Pass
79,80: NewLine
80,81: NL
81,84: Def
85,86: Identifier   a
86,87: (
87,88: Identifier   a
88,89: ,
89,90: NL
90,91: Identifier   b
91,92: ,
92,93: NL
93,94: Identifier   c
94,95: )
95,96: :
97,101: Pass
101,102: NewLine
102,103: NL
103,104: @
104,109: Identifier   decor
109,110: NewLine
110,113: Def
114,115: Identifier   a
115,116: (
116,117: )
117,118: :
119,123: Pass
123,124: NewLine
124,125: NL
125,126: @
126,131: Identifier   decor
131,132: NewLine
132,135: Def
136,137: Identifier   f
137,138: (
138,139: Identifier   a
139,140: :
141,153: StringLiteral   'annotation'
153,154: ,
155,156: Identifier   b
156,157: =
157,158: Integer   1
158,159: ,
160,161: Identifier   c
161,162: =
162,163: Integer   2
163,164: ,
165,166: *
166,167: Identifier   d
167,168: ,
169,170: Identifier   e
170,171: ,
172,173: Identifier   f
173,174: =
174,175: Integer   3
175,176: ,
177,179: **
179,180: Identifier   g
180,181: )
181,182: :
183,187: Pass
187,188: NewLine
188,189: NL
189,192: Def
193,197: Identifier   func
197,198: (
198,199: )
200,202: ->
203,207: None
207,208: :
209,213: Pass
213,214: NewLine
214,215: NL
215,220: Async
221,224: Def
225,226: Identifier   a
226,227: (
227,228: )
228,229: :
230,234: Pass
234,235: NewLine
235,236: NL
236,241: Async
242,245: Def
246,247: Identifier   a
247,248: (
248,249: )
249,250: :
250,251: NewLine
251,255: Indent
255,259: Pass
259,260: NewLine
260,261: NL
261,261: Dedent
261,266: Async
267,270: Def
271,272: Identifier   a
272,273: (
273,274: Identifier   a
274,275: ,
276,277: Identifier   b
277,278: ,
279,280: Identifier   c
280,281: )
281,282: :
283,287: Pass
287,288: NewLine
288,289: NL
289,292: Def
293,294: Identifier   a
294,295: [
295,296: Identifier   T
296,297: ]
297,298: (
298,299: )
299,300: :
301,305: Pass
305,306: NewLine
306,307: NL
307,310: Def
311,312: Identifier   a
312,313: [
313,314: Identifier   T
314,315: ,
316,317: Identifier   U
317,318: ]
318,319: (
319,320: )
320,321: :
322,326: Pass
326,327: NewLine
327,328: NL
328,331: Def
332,333: Identifier   a
333,334: [
334,335: Identifier   T
335,336: :
337,338: Identifier   U
338,339: ]
339,340: (
340,341: )
341,342: :
343,347: Pass
347,348: NewLine
348,349: NL
349,352: Def
353,354: Identifier   a
354,355: [
355,356: Identifier   T
356,357: :
358,359: Identifier   U
359,360: ,
361,362: Identifier   V
362,363: :
364,365: Identifier   W
365,366: ]
366,367: (
367,368: )
368,369: :
370,374: Pass
374,375: NewLine
375,376: NL
376,379: Def
380,381: Identifier   a
381,382: [
382,383: *
383,384: Identifier   T
384,385: ]
385,386: (
386,387: )
387,388: :
389,393: Pass
393,394: NewLine
394,395: NL
395,398: Def
399,400: Identifier   a
400,401: [
401,402: Identifier   T
402,403: ,
404,405: *
405,406: Identifier   U
406,407: ]
407,408: (
408,409: )
409,410: :
411,415: Pass
415,416: NewLine
416,417: NL
417,420: Def
421,422: Identifier   a
422,423: [
423,424: Identifier   T
424,425: :
426,427: Identifier   U
427,428: ,
429,430: *
430,431: Identifier   V
431,432: ]
432,433: (
433,434: )
434,435: :
436,440: Pass
440,441: NewLine
441,442: NL
442,445: Def
446,447: Identifier   a
447,448: [
448,449: Identifier   T
449,450: :
451,452: Identifier   U
452,453: ,
454,455: Identifier   V
455,456: :
457,458: Identifier   W
458,459: ,
460,461: *
461,462: Identifier   X
462,463: ]
463,464: (
464,465: )
465,466: :
467,471: Pass
471,472: NewLine
472,473: NL
473,476: Def
477,478: Identifier   a
478,479: [
479,481: **
481,482: Identifier   T
482,483: ]
483,484: (
484,485: )
485,486: :
487,491: Pass
491,492: NewLine
492,493: NL
493,496: Def
497,498: Identifier   a
498,499: [
499,500: Identifier   T
500,501: ,
502,504: **
504,505: Identifier   U
505,506: ]
506,507: (
507,508: )
508,509: :
510,514: Pass
514,515: NewLine
515,516: NL
516,519: Def
520,521: Identifier   a
521,522: [
522,523: Identifier   T
523,524: :
525,526: Identifier   U
526,527: ,
528,530: **
530,531: Identifier   V
531,532: ]
532,533: (
533,534: )
534,535: :
536,540: Pass
540,541: NewLine
541,542: NL
542,545: Def
546,547: Identifier   a
547,548: [
548,549: Identifier   T
549,550: :
551,552: Identifier   U
552,553: ,
554,555: Identifier   V
555,556: :
557,558: Identifier   W
558,559: ,
560,562: **
562,563: Identifier   X
563,564: ]
564,565: (
565,566: )
566,567: :
568,572: Pass
572,573: NewLine
573,574: NL
574,577: Def
578,579: Identifier   a
579,580: [
580,581: Identifier   T
581,582: ,
583,584: *
584,585: Identifier   U
585,586: ,
587,589: **
589,590: Identifier   V
590,591: ]
591,592: (
592,593: )
593,594: :
595,599: Pass
599,600: NewLine
600,601: NL
601,604: Def
605,606: Identifier   a
606,607: [
607,608: Identifier   T
608,609: :
610,611: Identifier   U
611,612: ,
613,614: *
614,615: Identifier   V
615,616: ,
617,619: **
619,620: Identifier   W
620,621: ]
621,622: (
622,623: )
623,624: :
625,629: Pass
629,630: NewLine
630,631: NL
631,634: Def
635,654: Identifier   dataclass_transform
654,655: (
655,656: NL
660,661: *
661,662: ,
662,663: NL
667,677: Identifier   eq_default
677,678: :
679,683: Identifier   bool
684,685: =
686,690: True
690,691: ,
691,692: NL
696,709: Identifier   order_default
709,710: :
711,715: Identifier   bool
716,717: =
718,723: False
723,724: ,
724,725: NL
729,744: Identifier   kw_only_default
744,745: :
746,750: Identifier   bool
751,752: =
753,758: False
758,759: ,
759,760: NL
764,778: Identifier   frozen_default
778,779: :
780,784: Identifier   bool
785,786: =
787,792: False
792,793: ,
795,842: Comment
842,843: NL
847,895: Comment
895,896: NL
900,916: Identifier   field_specifiers
916,917: :
918,923: Identifier   tuple
923,924: [
924,928: type
928,929: [
929,932: Identifier   Any
932,933: ]
934,935: |
936,944: Identifier   Callable
944,945: [
945,948: Ellipsis
948,949: ,
950,953: Identifier   Any
953,954: ]
954,955: ,
956,959: Ellipsis
959,960: ]
961,962: =
963,964: (
964,965: )
965,966: ,
966,967: NL
971,973: **
973,979: Identifier   kwargs
979,980: :
981,984: Identifier   Any
984,985: ,
985,986: NL
986,987: )
988,990: ->
991,1007: Identifier   IdentityFunction
1007,1008: :
1009,1012: Ellipsis
1012,1013: NewLine
