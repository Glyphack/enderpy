---
source: parser/src/lexer/mod.rs
assertion_line: 1290
description: "# Test case to check that we return correct error when two python statements are on the same line\n\ndef foo():\n    x = 1; y = 2\n    return x + y\n\ndef bar():\n    x = 1 y = 2\n    return x + y\n\na = 1  b = 2\n"
input_file: parser/test_data/inputs/separate_statements.py
---
[
    Token {
        kind: Comment,
        value: Str(
            "# Test case to check that we return correct error when two python statements are on the same line",
        ),
        start: 0,
        end: 97,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 97,
        end: 98,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 98,
        end: 99,
    },
    Token {
        kind: Def,
        value: None,
        start: 99,
        end: 102,
    },
    Token {
        kind: Identifier,
        value: Str(
            "foo",
        ),
        start: 103,
        end: 106,
    },
    Token {
        kind: LeftParen,
        value: None,
        start: 106,
        end: 107,
    },
    Token {
        kind: RightParen,
        value: None,
        start: 107,
        end: 108,
    },
    Token {
        kind: Colon,
        value: None,
        start: 108,
        end: 109,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 109,
        end: 110,
    },
    Token {
        kind: Indent,
        value: Indent(
            1,
        ),
        start: 110,
        end: 114,
    },
    Token {
        kind: Identifier,
        value: Str(
            "x",
        ),
        start: 114,
        end: 115,
    },
    Token {
        kind: Assign,
        value: None,
        start: 116,
        end: 117,
    },
    Token {
        kind: Integer,
        value: Number(
            "1",
        ),
        start: 118,
        end: 119,
    },
    Token {
        kind: SemiColon,
        value: None,
        start: 119,
        end: 120,
    },
    Token {
        kind: Identifier,
        value: Str(
            "y",
        ),
        start: 121,
        end: 122,
    },
    Token {
        kind: Assign,
        value: None,
        start: 123,
        end: 124,
    },
    Token {
        kind: Integer,
        value: Number(
            "2",
        ),
        start: 125,
        end: 126,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 126,
        end: 127,
    },
    Token {
        kind: Return,
        value: None,
        start: 131,
        end: 137,
    },
    Token {
        kind: Identifier,
        value: Str(
            "x",
        ),
        start: 138,
        end: 139,
    },
    Token {
        kind: Plus,
        value: None,
        start: 140,
        end: 141,
    },
    Token {
        kind: Identifier,
        value: Str(
            "y",
        ),
        start: 142,
        end: 143,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 143,
        end: 144,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 144,
        end: 145,
    },
    Token {
        kind: Dedent,
        value: Indent(
            1,
        ),
        start: 145,
        end: 145,
    },
    Token {
        kind: Def,
        value: None,
        start: 145,
        end: 148,
    },
    Token {
        kind: Identifier,
        value: Str(
            "bar",
        ),
        start: 149,
        end: 152,
    },
    Token {
        kind: LeftParen,
        value: None,
        start: 152,
        end: 153,
    },
    Token {
        kind: RightParen,
        value: None,
        start: 153,
        end: 154,
    },
    Token {
        kind: Colon,
        value: None,
        start: 154,
        end: 155,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 155,
        end: 156,
    },
    Token {
        kind: Indent,
        value: Indent(
            1,
        ),
        start: 156,
        end: 160,
    },
    Token {
        kind: Identifier,
        value: Str(
            "x",
        ),
        start: 160,
        end: 161,
    },
    Token {
        kind: Assign,
        value: None,
        start: 162,
        end: 163,
    },
    Token {
        kind: Integer,
        value: Number(
            "1",
        ),
        start: 164,
        end: 165,
    },
    Token {
        kind: Identifier,
        value: Str(
            "y",
        ),
        start: 166,
        end: 167,
    },
    Token {
        kind: Assign,
        value: None,
        start: 168,
        end: 169,
    },
    Token {
        kind: Integer,
        value: Number(
            "2",
        ),
        start: 170,
        end: 171,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 171,
        end: 172,
    },
    Token {
        kind: Return,
        value: None,
        start: 176,
        end: 182,
    },
    Token {
        kind: Identifier,
        value: Str(
            "x",
        ),
        start: 183,
        end: 184,
    },
    Token {
        kind: Plus,
        value: None,
        start: 185,
        end: 186,
    },
    Token {
        kind: Identifier,
        value: Str(
            "y",
        ),
        start: 187,
        end: 188,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 188,
        end: 189,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 189,
        end: 190,
    },
    Token {
        kind: Dedent,
        value: Indent(
            1,
        ),
        start: 190,
        end: 190,
    },
    Token {
        kind: Identifier,
        value: Str(
            "a",
        ),
        start: 190,
        end: 191,
    },
    Token {
        kind: Assign,
        value: None,
        start: 192,
        end: 193,
    },
    Token {
        kind: Integer,
        value: Number(
            "1",
        ),
        start: 194,
        end: 195,
    },
    Token {
        kind: Identifier,
        value: Str(
            "b",
        ),
        start: 197,
        end: 198,
    },
    Token {
        kind: Assign,
        value: None,
        start: 199,
        end: 200,
    },
    Token {
        kind: Integer,
        value: Number(
            "2",
        ),
        start: 201,
        end: 202,
    },
    Token {
        kind: NewLine,
        value: None,
        start: 202,
        end: 203,
    },
]
